"use strict";(self.webpackChunkinfra_portal=self.webpackChunkinfra_portal||[]).push([[3191],{3577:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"knowledge-base/packages/openapi-helpers/README","title":"openapi-helpers","description":"This package contains scripts, types and functions to help you work with OpenAPI.","source":"@site/docs/knowledge-base/packages/openapi-helpers/README.md","sourceDirName":"knowledge-base/packages/openapi-helpers","slug":"/knowledge-base/packages/openapi-helpers/","permalink":"/infra-portal/pr-preview/pr-43/docs/knowledge-base/packages/openapi-helpers/","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"custom_edit_url":null},"sidebar":"knowledgeBaseSidebar","previous":{"title":"OpenapiRouterConfig","permalink":"/infra-portal/pr-preview/pr-43/docs/knowledge-base/packages/openapi-express-viewer/typedoc/interfaces/OpenapiRouterConfig"},"next":{"title":"Prettier config","permalink":"/infra-portal/pr-preview/pr-43/docs/knowledge-base/packages/prettier-config/"}}');var a=r(4848),t=r(8453);const o={custom_edit_url:null},i="openapi-helpers",l={},p=[{value:"Installation",id:"installation",level:2},{value:"CLI Usage",id:"cli-usage",level:2},{value:"CLI Arguments Reference",id:"cli-arguments-reference",level:4},{value:"Generate Types",id:"generate-types",level:3},{value:"Generate Errors",id:"generate-errors",level:3},{value:"Help and Examples",id:"help-and-examples",level:3},{value:"Example: Run all generations",id:"example-run-all-generations",level:4},{value:"Programmatic Support",id:"programmatic-support",level:2},{value:"API Usage",id:"api-usage",level:3},{value:"TypedRequestHandler",id:"typedrequesthandler",level:2},{value:"Usage",id:"usage",level:3},{value:"RequestSender",id:"requestsender",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"openapi-helpers",children:"openapi-helpers"})}),"\n",(0,a.jsx)(n.p,{children:"This package contains scripts, types and functions to help you work with OpenAPI."}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.p,{children:"Run the following commands:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @map-colonies/openapi-helpers supertest prettier openapi-typescript @types/express\n"})}),"\n",(0,a.jsx)(n.h2,{id:"cli-usage",children:"CLI Usage"}),"\n",(0,a.jsxs)(n.p,{children:["The package provides a unified CLI for generating TypeScript types and error classes from OpenAPI specifications. All code generation is now performed using the ",(0,a.jsx)(n.code,{children:"generate"})," command, which supports subcommands for types and errors."]}),"\n",(0,a.jsx)(n.h4,{id:"cli-arguments-reference",children:"CLI Arguments Reference"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Positional Arguments:"}),"\nFor both ",(0,a.jsx)(n.code,{children:"generate types"})," and ",(0,a.jsx)(n.code,{children:"generate errors"})," commands, the positional arguments are:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"<openapi-file>"}),": Path to the OpenAPI YAML or JSON file to use as the source schema."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"<output-file>"}),": Path to the file where the generated code will be written."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"These arguments are required and must be provided in the order shown."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Optional Arguments:"})}),"\n",(0,a.jsxs)(n.p,{children:["For ",(0,a.jsx)(n.code,{children:"generate types"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-f, --format"}),": Format the generated types using Prettier"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-t, --add-typed-request-handler"}),": Add the TypedRequestHandler type to the generated types"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For ",(0,a.jsx)(n.code,{children:"generate errors"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-f, --format"}),": Format the generated code using Prettier"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-e, --errors-output <all|map|classes>"}),": Specify what to generate (default: all)\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"all"}),": generate both error classes and error code mapping"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"map"}),": generate only the error code mapping"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"classes"}),": generate only the error classes"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"generate-types",children:"Generate Types"}),"\n",(0,a.jsx)(n.p,{children:"Generate TypeScript types from an OpenAPI schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx @map-colonies/openapi-helpers generate types <openapi-file> <output-file> [options]\n"})}),"\n",(0,a.jsx)(n.p,{children:"For example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx @map-colonies/openapi-helpers generate types ./openapi3.yaml ./src/openapi.d.ts --format --add-typed-request-handler\n"})}),"\n",(0,a.jsx)(n.p,{children:"Options:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-f, --format"})," - Format the generated types using ",(0,a.jsx)(n.code,{children:"prettier"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-t, --add-typed-request-handler"})," - Add the ",(0,a.jsx)(n.code,{children:"TypedRequestHandler"})," type to the generated types."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"generate-errors",children:"Generate Errors"}),"\n",(0,a.jsx)(n.p,{children:"Generate error classes and error code mappings from an OpenAPI schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx @map-colonies/openapi-helpers generate errors <openapi-file> <output-file> [options]\n"})}),"\n",(0,a.jsx)(n.p,{children:"For example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx @map-colonies/openapi-helpers generate errors ./openapi3.yaml ./src/errors.ts --format\n"})}),"\n",(0,a.jsx)(n.p,{children:"Options:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-f, --format"})," - Format the generated code using ",(0,a.jsx)(n.code,{children:"prettier"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-e, --errors-output <all|map|classes>"})," - Specify what to generate:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"all"})," (default): generate both error classes and error code mapping"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"map"}),": generate only the error code mapping"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"classes"}),": generate only the error classes"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"help-and-examples",children:"Help and Examples"}),"\n",(0,a.jsx)(n.p,{children:"To see all available commands and options:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx @map-colonies/openapi-helpers --help\nnpx @map-colonies/openapi-helpers generate --help\nnpx @map-colonies/openapi-helpers generate types --help\nnpx @map-colonies/openapi-helpers generate errors --help\n"})}),"\n",(0,a.jsx)(n.h4,{id:"example-run-all-generations",children:"Example: Run all generations"}),"\n",(0,a.jsx)(n.p,{children:"You can run both types and errors generation in sequence:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx @map-colonies/openapi-helpers generate types ./openapi3.yaml ./src/openapi.d.ts --format --add-typed-request-handler\nnpx @map-colonies/openapi-helpers generate errors ./openapi3.yaml ./src/errors.ts --format --errors-output all\n"})}),"\n",(0,a.jsx)(n.h2,{id:"programmatic-support",children:"Programmatic Support"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["[!NOTE]\n",(0,a.jsx)(n.strong,{children:"Programmatic usage of the CLI (importing and using the generators directly) is only supported in ECMAScript modules (ESM)."})," CommonJS is not supported for direct imports."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The code generators (",(0,a.jsx)(n.code,{children:"generateTypes.mts"})," and ",(0,a.jsx)(n.code,{children:"generateErrors.mts"}),") now support functional programming patterns. You can inject custom transformation logic or AST manipulation by providing functional arguments, making the generators more flexible and composable for advanced use cases."]}),"\n",(0,a.jsx)(n.h3,{id:"api-usage",children:"API Usage"}),"\n",(0,a.jsx)(n.p,{children:"You can import and use the generators directly in your own scripts for full functional programming flexibility:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { generateTypes, generateErrors } from '@map-colonies/openapi-helpers/generators';\n\n// Generate types\nawait generateTypes(\n  'openapi3.yaml',\n  'src/openapi.d.ts',\n  {\n    shouldFormat: true,\n    addTypedRequestHandler: true,\n    // inject?: string,\n    // transform?: (schemaObject, metadata) => ...\n  }\n);\n\n// Generate errors\nawait generateErrors(\n  'openapi3.yaml',\n  'src/errors.ts',\n  {\n    shouldFormat: true,\n    includeMapping: true,\n    includeErrorClasses: true\n  }\n);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can pass custom ",(0,a.jsx)(n.code,{children:"inject"})," or ",(0,a.jsx)(n.code,{children:"transform"})," functions to ",(0,a.jsx)(n.code,{children:"generateTypes"})," for advanced AST/code manipulation, enabling highly composable and functional workflows."]}),"\n",(0,a.jsx)(n.h2,{id:"typedrequesthandler",children:"TypedRequestHandler"}),"\n",(0,a.jsxs)(n.p,{children:["The package contains a wrapper for the ",(0,a.jsx)(n.code,{children:"express"})," types package that provides autocomplete for all the request handlers to the API based on the OpenAPI schema. The TypedRequestHandler is initialized with the types generated by ",(0,a.jsx)(n.code,{children:"openapi-typescript"}),", and is configured based on operation name or method and path."]}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { TypedRequestHandlers } from '@map-colonies/openapi-helpers/typedRequestHandler';\nimport type { paths, operations } from './src/openapi.d.ts';\n\n// Initialize the TypedRequestHandlers with the paths and operations types\n// This can be done in a separate file and exported, in the same file or even in the same line\ntype MyHandlers = TypedRequestHandlers<paths, operations>;\n\nexport class Controller {\n  // Define the handler for the operation based on method and path\n  public getResource: MyHandlers['GET /resource'] = (req, res) => {\n    res.status(httpStatus.OK).json({id: 1, description: 'description', name: 'name'});\n  };\n\n\n  // Define the handler for the operation based on the operation name\n  public getResource: MyHandlers['getResource'] = (req, res) => {\n    res.status(httpStatus.OK).json({id: 1, description: 'description', name: 'name'});\n  };\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"requestsender",children:"RequestSender"}),"\n",(0,a.jsxs)(n.p,{children:["The package contains a wrapper for the ",(0,a.jsx)(n.code,{children:"supertest"})," package that provides autocomplete for all the requests to the API based on the OpenAPI schema. The RequestSender is initialized with the server's base URL and the OpenAPI schema and the types exported by ",(0,a.jsx)(n.code,{children:"openapi-typescript"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { RequestSender } from '@map-colonies/openapi-helpers/requestSender';\nimport type { paths, operations } from './src/openapi.d.ts';\n\nconst requestSender = await createRequestSender<paths, operations>('path/to/openapi3.yaml', expressApp);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The requestSender object contains all the paths and operations defined in the OpenAPI schema. For example, to send a request to the ",(0,a.jsx)(n.code,{children:"getUsers"})," operation with the ",(0,a.jsx)(n.code,{children:"/users"})," path and with the ",(0,a.jsx)(n.code,{children:"GET"})," method, you can use the following code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const response = await requestSender.getUsers();\n\n// or\n\nconst response = await requestSender.sendRequest({ \n  method: 'get', \n  path: '/simple-request'\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The package supports all the operations defined in the OpenAPI schema, either by operation name, or by using the ",(0,a.jsx)(n.code,{children:"sendRequest"})," function with the method, path and parameters."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["[!IMPORTANT]\nFor the package to function properly, you need to make sure that the following values are configured in your ",(0,a.jsx)(n.code,{children:"tsconfig.json"})," or ",(0,a.jsx)(n.code,{children:"jsconfig.json"})," files under compilerOptions:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'module: "NodeNext"'}),"\n",(0,a.jsx)(n.li,{children:'moduleResolution: "NodeNext"'}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["This page was generated from a remote source. you can find it on ",(0,a.jsx)(n.a,{href:"https://github.com/MapColonies/openapi-helpers/blob/master/README.md",children:"https://github.com/MapColonies/openapi-helpers/blob/master/README.md"})]})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(6540);const a={},t=s.createContext(a);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);