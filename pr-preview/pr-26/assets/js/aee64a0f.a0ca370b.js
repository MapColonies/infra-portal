"use strict";(self.webpackChunkinfra_portal=self.webpackChunkinfra_portal||[]).push([[3191],{3577:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"knowledge-base/packages/openapi-helpers/README","title":"openapi-helpers","description":"This package contains scripts, types and functions to help you work with openapi.","source":"@site/docs/knowledge-base/packages/openapi-helpers/README.md","sourceDirName":"knowledge-base/packages/openapi-helpers","slug":"/knowledge-base/packages/openapi-helpers/","permalink":"/infra-portal/pr-preview/pr-26/docs/knowledge-base/packages/openapi-helpers/","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"custom_edit_url":null},"sidebar":"knowledgeBaseSidebar","previous":{"title":"ts-npm-package-boilerplate","permalink":"/infra-portal/pr-preview/pr-26/docs/knowledge-base/packages/openapi-express-viewer/"},"next":{"title":"prettier-config","permalink":"/infra-portal/pr-preview/pr-26/docs/knowledge-base/packages/prettier-config/"}}');var r=s(4848),a=s(8453);const o={custom_edit_url:null},p="openapi-helpers",i={},d=[{value:"Installation",id:"installation",level:2},{value:"types-generator",id:"types-generator",level:2},{value:"options",id:"options",level:3},{value:"TypedRequestHandler",id:"typedrequesthandler",level:2},{value:"Usage",id:"usage",level:3},{value:"RequestSender",id:"requestsender",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"openapi-helpers",children:"openapi-helpers"})}),"\n",(0,r.jsx)(n.p,{children:"This package contains scripts, types and functions to help you work with openapi."}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.p,{children:"Run the following commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @map-colonies/openapi-helpers supertest prettier openapi-typescript @types/express\n"})}),"\n",(0,r.jsx)(n.h2,{id:"types-generator",children:"types-generator"}),"\n",(0,r.jsxs)(n.p,{children:["The package contains a script that wraps the ",(0,r.jsx)(n.code,{children:"openapi-typescript"})," package and generates types for the openapi schema. The script also formats the generated types using ",(0,r.jsx)(n.code,{children:"prettier"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The command structure is as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx @map-colonies/openapi-helpers <input-file> <output-file> --format --add-typed-request-handler\n"})}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx @map-colonies/openapi-helpers ./openapi3.yaml ./src/openapi.d.ts --format --add-typed-request-handler\n"})}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--format"})," - format the generated types using ",(0,r.jsx)(n.code,{children:"prettier"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--add-typed-request-handler"})," - add the ",(0,r.jsx)(n.code,{children:"TypedRequestHandler"})," type to the generated types."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"typedrequesthandler",children:"TypedRequestHandler"}),"\n",(0,r.jsxs)(n.p,{children:["The package contains a wrapper for the ",(0,r.jsx)(n.code,{children:"express"})," types package that provides autocomplete for all the request Handlers to the API based on the openapi. The TypedRequestHandler is initialized with the the typed generated by ",(0,r.jsx)(n.code,{children:"openapi-typescript"}),", and is configured based on operation name or method and path."]}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { TypedRequestHandlers } from '@map-colonies/openapi-helpers/typedRequestHandler';\nimport type { paths, operations } from './src/openapi.d.ts';\n\n// Initialize the TypedRequestHandlers with the paths and operations types\n// This can be done in a separate file and exported, in the same file or even in the same line\ntype MyHandlers = TypedRequestHandlers<paths, operations>;\n\nexport class Controller {\n  // Define the handler for the operation based method and path\n  public getResource: MyHandlers['GET /resource'] = (req, res) => {\n    res.status(httpStatus.OK).json({id: 1, description: 'description', name: 'name'});\n  };\n\n\n  // Define the handler for the operation based on the operation name\n  public getResource: MyHandlers['getResource'] = (req, res) => {\n    res.status(httpStatus.OK).json({id: 1, description: 'description', name: 'name'});\n  };\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"requestsender",children:"RequestSender"}),"\n",(0,r.jsxs)(n.p,{children:["The package contains a wrapper for the ",(0,r.jsx)(n.code,{children:"supertest"})," package that provides autocomplete for all the requests to the API based on the openapi. The requestSender is initialized with the server's base url and the openapi schema and the types exported by ",(0,r.jsx)(n.code,{children:"openapi-typescript"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { RequestSender } from '@map-colonies/openapi-helpers/requestSender';\nimport type { paths, operations } from './src/openapi.d.ts';\n\nconst requestSender = await createRequestSender<paths, operations>('path/to/openapi3.yaml', expressApp);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The requestSender object contains all the paths and operations defined in the openapi schema. For example, to send a request to the ",(0,r.jsx)(n.code,{children:"getUsers"})," operation with the ",(0,r.jsx)(n.code,{children:"/users"})," path and with the ",(0,r.jsx)(n.code,{children:"GET"})," method, you can use the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const response = await requestSender.getUsers();\n\n// or\n\nconst response = await requestSender.sendRequest({ \n  method: 'get', \n  path: '/simple-request'\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The package supports all the operations defined in the openapi schema, either by operation name, or by using the ",(0,r.jsx)(n.code,{children:"sendRequest"})," function with the method, path and parameters."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["[!IMPORTANT]\nFor the package function properly, you need to make sure that the following values are configured in your  ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," or ",(0,r.jsx)(n.code,{children:"jsconfig.json"})," files under compilerOptions:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'module: "NodeNext"'}),"\n",(0,r.jsx)(n.li,{children:'moduleResolution: "NodeNext"'}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This page was generated from a remote source. you can find it on ",(0,r.jsx)(n.a,{href:"https://github.com/MapColonies/openapi-helpers/blob/master/README.md",children:"https://github.com/MapColonies/openapi-helpers/blob/master/README.md"})]})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>p});var t=s(6540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);