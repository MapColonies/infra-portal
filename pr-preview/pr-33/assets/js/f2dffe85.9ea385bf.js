"use strict";(self.webpackChunk_map_colonies_openapi_helpers=self.webpackChunk_map_colonies_openapi_helpers||[]).push([[9927],{3819:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"knowledge-base/packages/telemetry/README","title":"Telemetry","description":"Motive","source":"@site/docs/knowledge-base/packages/telemetry/README.md","sourceDirName":"knowledge-base/packages/telemetry","slug":"/knowledge-base/packages/telemetry/","permalink":"/infra-portal/pr-preview/pr-33/docs/knowledge-base/packages/telemetry/","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"custom_edit_url":null},"sidebar":"knowledgeBaseSidebar","previous":{"title":"read-pkg","permalink":"/infra-portal/pr-preview/pr-33/docs/knowledge-base/packages/read-pkg/"},"next":{"title":"tsconfig","permalink":"/infra-portal/pr-preview/pr-33/docs/knowledge-base/packages/tsconfig/"}}');var i=t(7773),s=t(6636);const o={custom_edit_url:null},l="Telemetry",a={},c=[{value:"Motive",id:"motive",level:2},{value:"Manual for easy local grafana deployment",id:"manual-for-easy-local-grafana-deployment",level:2},{value:"API documentation",id:"api-documentation",level:2},{value:"example",id:"example",level:2},{value:"Tracing",id:"tracing",level:3},{value:"Metrics",id:"metrics",level:3},{value:"Metrics middleware",id:"metrics-middleware",level:2},{value:"Semantic Conventions",id:"semantic-conventions",level:2},{value:"The package&#39;s Semantic Conventions submodule defines a common set of (semantic) attributes which provide meaning to data when collecting, producing and consuming it.",id:"the-packages-semantic-conventions-submodule-defines-a-common-set-of-semantic-attributes-which-provide-meaning-to-data-when-collecting-producing-and-consuming-it",level:4},{value:"Configuration",id:"configuration",level:2},{value:"Common configuration",id:"common-configuration",level:3},{value:"Tracing configuration",id:"tracing-configuration",level:3},{value:"Metric configuration",id:"metric-configuration",level:3},{value:"How to release",id:"how-to-release",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",span:"span",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"telemetry",children:"Telemetry"})}),"\n",(0,i.jsx)(n.h2,{id:"motive",children:"Motive"}),"\n",(0,i.jsx)(n.p,{children:"This package goal is to make the experience of configuring and working with OpenTelemetry easier."}),"\n",(0,i.jsx)(n.h2,{id:"manual-for-easy-local-grafana-deployment",children:(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/telemetry/blob/master/localManual.md",children:"Manual for easy local grafana deployment"})}),"\n",(0,i.jsx)(n.h2,{id:"api-documentation",children:"API documentation"}),"\n",(0,i.jsxs)(n.p,{children:["Check the autogenerated documentation ",(0,i.jsx)(n.a,{href:"https://mapcolonies.github.io/telemetry/",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"example"}),"\n",(0,i.jsxs)(n.p,{children:["Below are short examples for tracing and metrics. More examples are available at the ",(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/telemetry/blob/master/examples/",children:"examples folder"}),", and the various opentelemetry repos."]}),"\n",(0,i.jsx)(n.h3,{id:"tracing",children:"Tracing"}),"\n",(0,i.jsx)(n.p,{children:"The following code shows a simple example of how to work with tracing. please notice that you need to manually install any auto-instrumentation library that you require."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Tracing } from '@map-colonies/telemetry';\nimport { trace } from '@opentelemetry/api';\n\nconst tracing = new Tracing();\n\ntracing.start();\n\nconst tracer = trace.getTracer('tracing-name')\n\nconst span = tracer.startSpan('some-action');\n\nspan.setAttribute('some-attribute');\n\n// DO STUFF\n\nspan.end();\n\ntracing.stop().then(() => console.log('done'));\n"})}),"\n",(0,i.jsx)(n.p,{children:"Another way to initialize tracing with custom resource:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Tracing } from '@map-colonies/telemetry';\nimport { Resource } from '@opentelemetry/resources';\n\nconst resource = new Resource({ 'service.version': number, 'service.name': 'my-service-name' });\n\nconst tracing = new Tracing([], resource);\n...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,i.jsx)(n.p,{children:"The following code shows a simple example of how to work with metrics."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Metrics } from '@map-colonies/telemetry';\n\nconst metrics = new Metrics('sample-meter');\n\nconst meter = metrics.start();\n\nconst counter = meter.createCounter('sample_counter');\n\ncounter.add(1);\n\nmetrics.stop().then(() => console.log('done'));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"metrics-middleware",children:"Metrics middleware"}),"\n",(0,i.jsx)(n.p,{children:"The package provides a middleware for Express that will automatically measure the duration of each request and the number of requests.\nIn addition, the middleware can be configured to collect NodeJS metrics."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { collectMetricsExpressMiddleware } from '@map-colonies/telemetry/prom-metrics';\nimport express from 'express';\nimport { Registry } from 'prom-client';\n\nconst prom = collectMetricsExpressMiddleware({ registry: new Registry(), labels: { meow: 'a' } });\n\napp.use('/metrics', prom);\napp.get('/', (req, res) => {\n  res.json({ x: 'd' });\n});\n\napp.listen(8080, () => console.log('server listening on 8080'));\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["[!NOTE]\nIf you are not running the ",(0,i.jsx)(n.code,{children:"express-openapi-validator"})," middleware, its recommended to turn off the ",(0,i.jsx)(n.code,{children:"includeOperationId"})," option in the ",(0,i.jsx)(n.code,{children:"collectMetricsExpressMiddleware"})," function as the operation label will always be null."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"semantic-conventions",children:"Semantic Conventions"}),"\n",(0,i.jsx)(n.h4,{id:"the-packages-semantic-conventions-submodule-defines-a-common-set-of-semantic-attributes-which-provide-meaning-to-data-when-collecting-producing-and-consuming-it",children:"The package's Semantic Conventions submodule defines a common set of (semantic) attributes which provide meaning to data when collecting, producing and consuming it."}),"\n",(0,i.jsxs)(n.p,{children:["Based on the ",(0,i.jsx)(n.a,{href:"https://opentelemetry.io/docs/specs/semconv/",children:"official OpenTelemetry conventions"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/telemetry/blob/master/src/semanticConventions/README.md",children:"Link to full documentation"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"common-configuration",children:"Common configuration"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"name"}),(0,i.jsx)(n.th,{children:"allowed value"}),(0,i.jsx)(n.th,{children:"default value"}),(0,i.jsx)(n.th,{children:"description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TELEMETRY_SERVICE_NAME"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"package.json name"}),(0,i.jsx)(n.td,{children:"The name of the service to put as attribute"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TELEMETRY_SERVICE_VERSION"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"package.json version"}),(0,i.jsx)(n.td,{children:"The version of the service to put as attribute"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TELEMETRY_HOST_NAME"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"os.hostname()"})}),(0,i.jsx)(n.td,{children:"The value of the hostname attribute to use, will override the hostname"})]})]})]}),"\n",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.h3,{id:"tracing-configuration",children:"Tracing configuration"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"name"}),(0,i.jsx)(n.th,{children:"allowed value"}),(0,i.jsx)(n.th,{children:"default value"}),(0,i.jsx)(n.th,{children:"description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TELEMETRY_TRACING_ENABLED"}),(0,i.jsx)(n.td,{children:"'true', 'false'"}),(0,i.jsx)(n.td,{children:"'false'"}),(0,i.jsx)(n.td,{children:"Should Tracing be enabled"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["TELEMETRY_TRACING_URL",(0,i.jsx)(n.span,{style:{color:"red"},children:"*"})]}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"http://localhost:4318/v1/traces",children:"http://localhost:4318/v1/traces"})}),(0,i.jsx)(n.td,{children:"The URL to the OpenTelemetry Collector"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TELEMETRY_TRACING_RATIO"}),(0,i.jsx)(n.td,{children:"float"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"The amount of traces to sample (0-1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TELEMETRY_TRACING_DEBUG"}),(0,i.jsx)(n.td,{children:"'true', 'false'"}),(0,i.jsx)(n.td,{children:"'false'"}),(0,i.jsx)(n.td,{children:"Enable debug mode for tracing which enables opentelemetry debug log and console trace export"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.span,{style:{color:"red"},children:"*"})," required (only when tracing is enabled).\n",(0,i.jsx)(n.br,{})]}),"\n",(0,i.jsx)(n.h3,{id:"metric-configuration",children:"Metric configuration"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"name"}),(0,i.jsx)(n.th,{children:"allowed value"}),(0,i.jsx)(n.th,{children:"default value"}),(0,i.jsx)(n.th,{children:"description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TELEMETRY_METRICS_ENABLED"}),(0,i.jsx)(n.td,{children:"'true', 'false'"}),(0,i.jsx)(n.td,{children:"'false'"}),(0,i.jsx)(n.td,{children:"Should Metrics be enabled"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["TELEMETRY_METRICS_URL",(0,i.jsx)(n.span,{style:{color:"red"},children:"*"})]}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"http://localhost:4318/v1/metrics",children:"http://localhost:4318/v1/metrics"})}),(0,i.jsx)(n.td,{children:"The URL to the OpenTelemetry Collector"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TELEMETRY_METRICS_INTERVAL"}),(0,i.jsx)(n.td,{children:"number"}),(0,i.jsx)(n.td,{children:"15000"}),(0,i.jsx)(n.td,{children:"The interval in milliseconds between sending data to the collector"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.span,{style:{color:"red"},children:"*"})," required (only when metrics is enabled)."]}),"\n",(0,i.jsx)(n.h3,{id:"how-to-release",children:"How to release"}),"\n",(0,i.jsxs)(n.p,{children:["Run the command ",(0,i.jsx)(n.code,{children:"npm run release --"})," to bump the version in all the files and create a changelog."]}),"\n",(0,i.jsxs)(n.p,{children:["For more detailed documentation and examples check: ",(0,i.jsx)(n.a,{href:"https://github.com/conventional-changelog/standard-version",children:"https://github.com/conventional-changelog/standard-version"})]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This page was generated from a remote source. you can find it on ",(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/telemetry/blob/master/README.md",children:"https://github.com/MapColonies/telemetry/blob/master/README.md"})]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6636:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(8441);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);