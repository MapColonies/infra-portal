"use strict";(self.webpackChunkinfra_portal=self.webpackChunkinfra_portal||[]).push([[4339],{4978:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"knowledge-base/json-schema/json-schema-tips","title":"JSON Schema Tips","description":"Metadata","source":"@site/docs/knowledge-base/json-schema/json-schema-tips.mdx","sourceDirName":"knowledge-base/json-schema","slug":"/knowledge-base/json-schema/json-schema-tips","permalink":"/infra-portal/pr-preview/pr-31/docs/knowledge-base/json-schema/json-schema-tips","draft":false,"unlisted":false,"editUrl":"https://github.com/MapColonies/infra-portal/tree/master/docs/knowledge-base/json-schema/json-schema-tips.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"knowledgeBaseSidebar","previous":{"title":"JSON Schema","permalink":"/infra-portal/pr-preview/pr-31/docs/category/json-schema"},"next":{"title":"MonitoringSchema","permalink":"/infra-portal/pr-preview/pr-31/docs/knowledge-base/monitoring/"}}');var r=s(4848),i=s(8453),a=(s(6540),s(5195));const o={tableOfContentsInline:"tableOfContentsInline_prmo"};function l(e){let{toc:n,minHeadingLevel:s,maxHeadingLevel:t}=e;return(0,r.jsx)("div",{className:o.tableOfContentsInline,children:(0,r.jsx)(a.A,{toc:n,minHeadingLevel:s,maxHeadingLevel:t,className:"table-of-contents",linkClassName:null})})}const c={sidebar_position:2},d="JSON Schema Tips",h={},m=[{value:"Metadata",id:"metadata",level:2},{value:"Examples",id:"examples",level:2},{value:"Comments",id:"comments",level:2},{value:"Default",id:"default",level:2},{value:"Required",id:"required",level:2},{value:"Enums",id:"enums",level:2},{value:"Refs",id:"refs",level:2},{value:"Internal Refs",id:"internal-refs",level:3},{value:"External Refs",id:"external-refs",level:3},{value:"Definitions",id:"definitions",level:2},{value:"Schema Composition",id:"schema-composition",level:2},{value:"AllOf",id:"allof",level:3},{value:"OneOf",id:"oneof",level:3},{value:"Strings",id:"strings",level:2},{value:"Formats",id:"formats",level:3},{value:"Patterns",id:"patterns",level:3},{value:"Const",id:"const",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"json-schema-tips",children:"JSON Schema Tips"})}),"\n",(0,r.jsx)(l,{toc:m}),"\n",(0,r.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsxs)(n.p,{children:["You should use the ",(0,r.jsx)(n.code,{children:"title"})," and ",(0,r.jsx)(n.code,{children:"description"})," keywords to provide a description of the schema. This will help users understand what the schema is for."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "title": "My Schema",\n  "description": "This is a schema for my app"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["You can provide examples of how the schema should be used by using the ",(0,r.jsx)(n.code,{children:"examples"})," keyword."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "type": "string"\n    }\n  },\n  "examples": {\n    "name": "John Doe"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"$comment"})," keyword to provide comments in the schema. This can be useful for providing additional information about the schema."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "type": "string"\n    }\n  },\n  "$comment": "This is a schema for my app"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For more information check the relevant ",(0,r.jsx)(n.a,{href:"https://json-schema.org/understanding-json-schema/reference/comments",children:"JSON Schema Docs"})]}),"\n",(0,r.jsx)(n.h2,{id:"default",children:"Default"}),"\n",(0,r.jsxs)(n.p,{children:["When you have a default value for a property, you can use the ",(0,r.jsx)(n.code,{children:"default"})," keyword to set it. This is useful for when you want to provide a default value for a property that is not required."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "type": "string",\n      "default": "John Doe"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The value will be provided by the config even if it is not set."}),"\n",(0,r.jsx)(n.h2,{id:"required",children:"Required"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"required"})," keyword to specify which properties are required in the schema.\nBy default, all properties are optional."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "type": "string"\n    }\n  },\n  "required": ["name"]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The types generated for the schema will reflect the required properties."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type MySchema = {\n  name: string;\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"enums",children:"Enums"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"enum"})," keyword to specify a list of possible values for a property.\nIt is not required to specify the type of the property when using ",(0,r.jsx)(n.code,{children:"enum"}),", so its possible for the enum to be of different types."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "color": {\n      "enum": ["red", "green", "blue"]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The types generated will be a union of the enum values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type MySchema = {\n  color: "red" | "green" | "blue";\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"refs",children:"Refs"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"$ref"})," keyword to reference another schema.\nThe references can be either internal or external."]}),"\n",(0,r.jsx)(n.p,{children:"Reference can be used to reuse schemas and keep the schema definitions clean. Even for small schemas like Id, it is a good practice to use refs."}),"\n",(0,r.jsx)(n.h3,{id:"internal-refs",children:"Internal Refs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "$ref": "#/definitions/name"\n    }\n  },\n  "definitions": {\n    "name": {\n      "type": "string"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"external-refs",children:"External Refs"}),"\n",(0,r.jsx)(n.p,{children:"External refs are only valid to other schemas that are defined in the schemas repository. The way to reference is to use the ID of required the schema."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "$ref": "https://mapcolonies.com/common/schema/v1"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"definitions",children:"Definitions"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"definitions"})," keyword to define reusable schemas. The definitions are not part of the validated schema, unless they are referenced."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "$ref": "#/definitions/name"\n    }\n  },\n  "definitions": {\n    "name": {\n      "type": "string"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"schema-composition",children:"Schema Composition"}),"\n",(0,r.jsx)(n.p,{children:"In many cases you will want to compose multiple schemas together. JSON Schema provides a few keywords to help with this.\nThis way you can reuse schemas and keep the schema definitions clean."}),"\n",(0,r.jsx)(n.p,{children:"The classic example in our case is to extends the boilerplate schema to fit our service."}),"\n",(0,r.jsxs)(n.p,{children:["For more information check the relevant ",(0,r.jsx)(n.a,{href:"https://json-schema.org/understanding-json-schema/reference/combining",children:"JSON Schema Docs"})]}),"\n",(0,r.jsx)(n.h3,{id:"allof",children:"AllOf"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"allOf"})," keyword is used to combine multiple schemas together. The properties of the schemas are merged together."]}),"\n",(0,r.jsx)(n.p,{children:"The following schema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "allOf": [\n    {\n      "type": "object",\n      "properties": {\n        "name": {\n          "type": "string"\n        }\n      }\n    },\n    {\n      "type": "object",\n      "properties": {\n        "age": {\n          "type": "number"\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Will be equivalent to the following schema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "type": "string"\n    },\n    "age": {\n      "type": "number"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsxs)(n.p,{children:["When using ",(0,r.jsx)(n.code,{children:"additionalProperties: false"})," in the schemas, the ",(0,r.jsx)(n.code,{children:"allOf"})," keyword will not merge the properties together. Instead, it will require that all properties are present in the schema, Which is not possible.\nCheck the ",(0,r.jsx)(n.a,{href:"https://json-schema.org/understanding-json-schema/reference/object#extending",children:"JSON Schema Docs"})," for more information."]})}),"\n",(0,r.jsx)(n.h3,{id:"oneof",children:"OneOf"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"oneOf"})," keyword is used to specify that only one of the schemas should be valid."]}),"\n",(0,r.jsx)(n.p,{children:"The following schema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "oneOf": [\n    {\n      "type": "object",\n      "properties": {\n        "name": {\n          "type": "string"\n        }\n      }\n    },\n    {\n      "type": "object",\n      "properties": {\n        "age": {\n          "type": "number"\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"If both properties are provided, the schema will be invalid."}),"\n",(0,r.jsx)(n.h2,{id:"strings",children:"Strings"}),"\n",(0,r.jsx)(n.h3,{id:"formats",children:"Formats"}),"\n",(0,r.jsxs)(n.p,{children:["It is recommended to use the ",(0,r.jsx)(n.code,{children:"format"})," keyword to specify the format of the string. This will help users understand what the string is for and validate accordingly."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "string",\n  "format": "email"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For a full list of formats check the ",(0,r.jsx)(n.a,{href:"https://github.com/ajv-validator/ajv-formats?tab=readme-ov-file#formats",children:"ajv-formats"})," repository."]}),"\n",(0,r.jsx)(n.h3,{id:"patterns",children:"Patterns"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"pattern"})," keyword to specify a regular expression that the string should match."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "string",\n  "pattern": "^[a-zA-Z]+$"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"const",children:"Const"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"const"})," keyword to specify a constant value for the string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "type": "string",\n  "const": "John Doe"\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},5195:(e,n,s)=>{s.d(n,{A:()=>f});var t=s(6540),r=s(6342);function i(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),s=Array(7).fill(-1);n.forEach(((e,n)=>{const t=s.slice(2,e.level);e.parentIndex=Math.max(...t),s[e.level]=n}));const t=[];return n.forEach((e=>{const{parentIndex:s,...r}=e;s>=0?n[s].children.push(r):t.push(r)})),t}function a(e){let{toc:n,minHeadingLevel:s,maxHeadingLevel:t}=e;return n.flatMap((e=>{const n=a({toc:e.children,minHeadingLevel:s,maxHeadingLevel:t});return function(e){return e.level>=s&&e.level<=t}(e)?[{...e,children:n}]:n}))}function o(e){const n=e.getBoundingClientRect();return n.top===n.bottom?o(e.parentNode):n}function l(e,n){let{anchorTopOffset:s}=n;const t=e.find((e=>o(e).top>=s));if(t){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(o(t))?t:e[e.indexOf(t)-1]??null}return e[e.length-1]??null}function c(){const e=(0,t.useRef)(0),{navbar:{hideOnScroll:n}}=(0,r.p)();return(0,t.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function d(e){const n=(0,t.useRef)(void 0),s=c();(0,t.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:t,linkActiveClassName:r,minHeadingLevel:i,maxHeadingLevel:a}=e;function o(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(t),o=function(e){let{minHeadingLevel:n,maxHeadingLevel:s}=e;const t=[];for(let r=n;r<=s;r+=1)t.push(`h${r}.anchor`);return Array.from(document.querySelectorAll(t.join()))}({minHeadingLevel:i,maxHeadingLevel:a}),c=l(o,{anchorTopOffset:s.current}),d=e.find((e=>c&&c.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,s){s?(n.current&&n.current!==e&&n.current.classList.remove(r),e.classList.add(r),n.current=e):e.classList.remove(r)}(e,e===d)}))}return document.addEventListener("scroll",o),document.addEventListener("resize",o),o(),()=>{document.removeEventListener("scroll",o),document.removeEventListener("resize",o)}}),[e,s])}var h=s(8774),m=s(4848);function p(e){let{toc:n,className:s,linkClassName:t,isChild:r}=e;return n.length?(0,m.jsx)("ul",{className:r?void 0:s,children:n.map((e=>(0,m.jsxs)("li",{children:[(0,m.jsx)(h.A,{to:`#${e.id}`,className:t??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,m.jsx)(p,{isChild:!0,toc:e.children,className:s,linkClassName:t})]},e.id)))}):null}const u=t.memo(p);function f(e){let{toc:n,className:s="table-of-contents table-of-contents__left-border",linkClassName:o="table-of-contents__link",linkActiveClassName:l,minHeadingLevel:c,maxHeadingLevel:h,...p}=e;const f=(0,r.p)(),j=c??f.tableOfContents.minHeadingLevel,x=h??f.tableOfContents.maxHeadingLevel,g=function(e){let{toc:n,minHeadingLevel:s,maxHeadingLevel:r}=e;return(0,t.useMemo)((()=>a({toc:i(n),minHeadingLevel:s,maxHeadingLevel:r})),[n,s,r])}({toc:n,minHeadingLevel:j,maxHeadingLevel:x});return d((0,t.useMemo)((()=>{if(o&&l)return{linkClassName:o,linkActiveClassName:l,minHeadingLevel:j,maxHeadingLevel:x}}),[o,l,j,x])),(0,m.jsx)(u,{toc:g,className:s,linkClassName:o,...p})}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);