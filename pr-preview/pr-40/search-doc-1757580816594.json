{"searchDocs":[{"title":"Guides","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/guides","content":"Guides","keywords":"","version":"Next"},{"title":"Default config","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/default-config","content":"","keywords":"","version":"Next"},{"title":"Assumptions​","type":1,"pageTitle":"Default config","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/default-config#assumptions","content":" This guide assumes that you have an understanding of creating schemas and already created a schema for your service. Check out the Zero to Hero guide if you haven't created a schema yet.  The examples in this guide will use the schema my-schema with version v1 that was created in the Zero to Hero guide.  ","version":"Next","tagName":"h3"},{"title":"create your default config​","type":1,"pageTitle":"Default config","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/default-config#create-your-default-config","content":" Create a file named v1.configs.json in the same folder as your schema file.  schemas/my-domain/my-schema/v1.configs.json []   Choose a name for your default config:  schemas/my-domain/my-schema/v1.configs.json [ { &quot;name&quot;: &quot;default-config&quot;, &quot;value&quot;: {} } ]   Add the default config value based on the schema:  schemas/my-domain/my-schema/v1.configs.json [ { &quot;name&quot;: &quot;default-config&quot;, &quot;value&quot;: { &quot;id&quot;: &quot;default-id&quot;, &quot;name&quot;: &quot;default-name&quot;, &quot;age&quot;: 18 &quot;isAlive&quot;: true } } ]   ","version":"Next","tagName":"h2"},{"title":"Run validations​","type":1,"pageTitle":"Default config","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/default-config#run-validations","content":" Run the validation script to make sure the default config is valid.  npm run validate   ","version":"Next","tagName":"h2"},{"title":"Add a reference to another default config​","type":1,"pageTitle":"Default config","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/default-config#add-a-reference-to-another-default-config","content":" If your default config has a reference to another config you created, or a common config you can reference it in the value:  schemas/my-domain/my-schema/v1.configs.json [ { &quot;name&quot;: &quot;default-config&quot;, &quot;value&quot;: { &quot;commonConfig&quot;: { &quot;$ref&quot;: { &quot;configName&quot;: &quot;other-config&quot;, &quot;version&quot;: &quot;latest&quot; } } } } ]   ","version":"Next","tagName":"h2"},{"title":"Next steps​","type":1,"pageTitle":"Default config","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/default-config#next-steps","content":" Now that you finished writing your default config, you can submit a PR to the schemas repo and ask for it to be reviewed.  If you have any questions or need help, feel free to ask for help.  If you have any suggestions for this guide, please open a pull request. ","version":"Next","tagName":"h2"},{"title":"Helm Diff","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/helm-diff","content":"","keywords":"","version":"Next"},{"title":"How to install​","type":1,"pageTitle":"Helm Diff","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/helm-diff#how-to-install","content":" ","version":"Next","tagName":"h2"},{"title":"On a computer with internet access​","type":1,"pageTitle":"Helm Diff","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/helm-diff#on-a-computer-with-internet-access","content":" helm plugin install https://github.com/databus23/helm-diff  ","version":"Next","tagName":"h3"},{"title":"On a computer without internet access​","type":1,"pageTitle":"Helm Diff","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/helm-diff#on-a-computer-without-internet-access","content":" Assuming that you're working on your Windows workstation in the Outnet you can install the plugin by copying a few files into your HELM_PLUGINS directory.  Go to the helm-diff gitlab repo.Clone the helm-diff gitlab repo to your workstation.In the root directory you'll find a directory called tar-gz, cd into this directory.Extract the helm-diff-windows-amd64.tgzFind out what's the HELM_PLUGINS path configured on your computer by running helm env, in the out output you'll find all the helm env vars, copy the path.If the HELM_PLUGINS doesn't exist create it.Create a directory helm-diff under the HELM_PLUGINS path.From the extracted tgz file, copy the bin directory and the plugin.yaml into the HELM_PLUGINS/helm-diff directory.  Now you have helm-diff plugin installed on your Windows workstation.  ","version":"Next","tagName":"h3"},{"title":"How to use it​","type":1,"pageTitle":"Helm Diff","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/helm-diff#how-to-use-it","content":" Assuming that your chart name is foo and your values file name is dev-values.yamlrun the following from the Chart directory you wish to upgrade. helm diff upgrade foo --values dev-values.yaml . You can also specify multiple values files: helm diff upgrade foo --values dev-values.yaml --values dev1-values.yaml . If there's a difference, the output will show all the diffs between the k8s objects which will be modified/create/deleted.  Here's an example of the helm diff output ","version":"Next","tagName":"h2"},{"title":"Pipelines","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/pipelines","content":"","keywords":"","version":"Next"},{"title":"Bundler/Unbundler​","type":1,"pageTitle":"Pipelines","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/pipelines#bundlerunbundler","content":"   ","version":"Next","tagName":"h2"},{"title":"Knowledge Base","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base","content":"Knowledge Base","keywords":"","version":"Next"},{"title":"Bundler pipeline​","type":1,"pageTitle":"Pipelines","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/pipelines#bundler-pipeline","content":" The bundler pipeline has 1 parameter which is the artifacts.json file.  Here's an example of the artifacts.json  { &quot;docker&quot;: { &quot;acrarolibotnonprod.azurecr.io&quot;: { &quot;3d-gateway&quot;: &quot;v2.4.2&quot;, &quot;store-trigger&quot;: &quot;v1.5.2&quot; }, &quot;docker.io&quot;: { &quot;bitnami/redis&quot;: &quot;7.2.3&quot;, &quot;timonwong/uwsgi-exporter&quot;: &quot;latest&quot; } }, &quot;helm&quot;: { &quot;acrarolibotnonprod.azurecr.io&quot;: { &quot;gateway&quot;: &quot;2.4.2&quot;, &quot;store-trigger&quot;: &quot;1.5.2&quot; }, &quot;https://charts.bitnami.com/bitnami&quot;: { &quot;redis&quot;: &quot;18.5.0&quot; } }, &quot;git&quot;: [ &quot;MapColonies/helm-charts&quot; ] }   In order to trigger the bundler pipeline you'll need to follow the steps below:  Go to the bundler pipelineClick on Build with parameters Click on Choose File and upload the artifacts.json from you local computer. Click the Build buttonAfter the bundler will finish it'll send a slack message to the &lt;team&gt;-notifications channel based on the user logged in.Click on the download link in the slack message and download the bundle zip file which you'll use later on in the unbundler in the relevant network.  ","version":"Next","tagName":"h3"},{"title":"Unbundler pipeline​","type":1,"pageTitle":"Pipelines","url":"/infra-portal/pr-preview/pr-40/docs/guides/DevOps/pipelines#unbundler-pipeline","content":" In order to trigger the unbundler, open the jenkins instance in the relevant network where you want to to unbundle and click on the unbundler pipeline and follow the steps bellow.  Click on Build with ParametersClick on Choose file and select the bundler zip file from your computerClick the build buttonOnce the bundler is done you'll be able to find all the artifacts which were in the bundle zip file in all the registries in the specific network you're working on. ","version":"Next","tagName":"h3"},{"title":"Starting a new project using the TypeScript Server Boilerplate","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/guides/ts-server-boilerplate","content":"Starting a new project using the TypeScript Server Boilerplate When starting a new project based on the boilerplate, you need to change and rename a few files and directories to match your project's name. The following steps will guide you through the process of creating a new project based on the boilerplate. Create a new repository in GitHub. Make sure to set the boilerplate as the template repository.Clone the new repository to your local machine. git clone https://github.com/MapColonies/my-new-amazing-repo.git or if you prefer using ssh: git clone git@github.com:MapColonies/my-new-amazing-repo.git Set the name of the project in the package.json and package-lock.json files. Change the name field to match your project's name. { &quot;name&quot;: &quot;my-new-amazing-repo&quot;, ... } Edit the README.md file to match your project's name and description. You can also add any additional information that is relevant to your project. Rename any mention of ts-server-boilerplate in the codebase to match your project's name. You should use VS Code or any other IDE to search for the term ts-server-boilerplate and replace it with your project's name. Rename the src/resourceName and src/anotherResource directories and change the content of the files inside them to match your project's resources. You can also add any additional resources that are relevant to your project. Edit the liveness probe in the src/index.ts file to match your project's needs. The liveness probe is responsible for checking the health of the application and returning a response to the client. The liveness probe is configured to return a 200 OK response if the application is healthy, otherwise the application is unhealthy. Run your project to make sure everything is working as expected. npm run start:dev Change the tests to match your project's resources. You can also add any additional tests that are relevant to your project. Run your tests to make sure everything is working as expected. npm run test From here on, you can start developing your project using the boilerplate as a starting point. The boilerplate includes many features and packages to make the development process easier and faster and ensure common practices and standards. Check the boilerplate documentation for more information on the features and packages included in the boilerplate.","keywords":"","version":"Next"},{"title":"Config Management - What Is It?","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management","content":"","keywords":"","version":"Next"},{"title":"Motivation​","type":1,"pageTitle":"Config Management - What Is It?","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management#motivation","content":" The MapColonies™ Config Management system provides a centralized solution for managing all service configurations. This system ensures a single source of truth, simplifying configuration management. It also validates configurations against a JSON Schema, guaranteeing their correctness. Additionally, schema validation ensures that all configurations are strongly typed, enabling seamless integration with your code.  This system will also helps you handle config changes easier. If any of the config has changed, instead of changing the env and redeploy all the deployment, you can just rollout the pod in order to get the new config.  Now you can see the zero to hero doc and integrate this system in your service!  ","version":"Next","tagName":"h2"},{"title":"What's Next​","type":1,"pageTitle":"Config Management - What Is It?","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management#whats-next","content":" Customizable Configuration for Testing: We'll add the ability to customize configurations specifically for testing purposes.Enhanced Observability: We'll add improved observability features to facilitate more detailed analysis.UI Improvements: We'll refine the user interface to enhance interaction and usability. ","version":"Next","tagName":"h2"},{"title":"Default configs","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management/default-configs","content":"","keywords":"","version":"Next"},{"title":"What are default configs?​","type":1,"pageTitle":"Default configs","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management/default-configs#what-are-default-configs","content":" default configs are configs we define when creating our schema that will be deployed to the config-server when the server is started for the first time. This is useful as it makes it easier to manage configurations in a more organized way and make the deployment a breeze.  Default configs support references to other default configs, so you can reuse configurations in multiple places.  ","version":"Next","tagName":"h2"},{"title":"How do I define a default config?​","type":1,"pageTitle":"Default configs","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management/default-configs#how-do-i-define-a-default-config","content":" To define a default config, you need to create a file in the same folder as the schema, with the same version as the schema. For example if the schema is in schemas/my-schema/v1.schema.json, the default config should be in config/my-schema/v1.configs.json.  Each file supports multiple configs, as long as their name is unique across all the configs in the schemas repo.  The file is enforced with the following schema, with the value enforced by the schema of the config:  { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;value&quot;: {} }, &quot;required&quot;: [&quot;name&quot;, &quot;value&quot;] }, &quot;minItems&quot;: 1 }  ","version":"Next","tagName":"h2"},{"title":"References","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management/references","content":"","keywords":"","version":"Next"},{"title":"How does it work​","type":1,"pageTitle":"References","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management/references#how-does-it-work","content":" When you pass a reference to another config instance, the configuration manager will parse and save the references so it can be resolved later. When the configuration is resolved, the configuration manager will replace the reference with the actual configuration.  For the server to understand a reference it needs to include both the config name and the version of the config. It's also possible to set the version as latest to always get the latest version of the referenced config.  When the final configuration is resolved, the referenced config will be merged with the current configuration under the same hierarchy.  ","version":"Next","tagName":"h2"},{"title":"Reference structure​","type":1,"pageTitle":"References","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management/references#reference-structure","content":" In order to use a reference, you need to pass an object with the following structure:  { &quot;$ref&quot;: { &quot;configName&quot;: &quot;requested-config&quot;, &quot;version&quot;: &quot;latest&quot; } }   tip In the config-ui config editor, you can press Ctrl + Space to insert a snippet with the reference structure.  ","version":"Next","tagName":"h2"},{"title":"Example usage​","type":1,"pageTitle":"References","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/config-management/references#example-usage","content":" Let's say we want to create a configuration for a database connection for our app. We know there is already a configuration for the database connection in the db-partial config that is only missing the database name.  db-partial { &quot;ssl&quot;: { &quot;enabled&quot;: false }, &quot;host&quot;: &quot;avi&quot; }   We can create a new configuration that references the db-partial config and only sets the database name.  db-full { &quot;$ref&quot;: { &quot;configName&quot;: &quot;db-partial&quot;, &quot;version&quot;: &quot;latest&quot; }, &quot;database&quot;: &quot;my-db&quot; }   The resolved configuration will be:  { &quot;ssl&quot;: { &quot;enabled&quot;: false }, &quot;host&quot;: &quot;avi&quot;, &quot;database&quot;: &quot;my-db&quot; }  ","version":"Next","tagName":"h2"},{"title":"Bundler & Unbundler","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/bundler-unbundler","content":"","keywords":"","version":"Next"},{"title":"Bundler pipeline​","type":1,"pageTitle":"Bundler & Unbundler","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/bundler-unbundler#bundler-pipeline","content":" The bundler pipeline has 1 parameter which is the artifacts.json file.  Here's an example of the artifacts.json  { &quot;docker&quot;: { &quot;acrarolibotnonprod.azurecr.io&quot;: { &quot;3d-gateway&quot;: &quot;v2.4.2&quot;, &quot;store-trigger&quot;: &quot;v1.5.2&quot; }, &quot;docker.io&quot;: { &quot;bitnami/redis&quot;: &quot;7.2.3&quot;, &quot;timonwong/uwsgi-exporter&quot;: &quot;latest&quot; } }, &quot;helm&quot;: { &quot;acrarolibotnonprod.azurecr.io&quot;: { &quot;gateway&quot;: &quot;2.4.2&quot;, &quot;store-trigger&quot;: &quot;1.5.2&quot; }, &quot;https://charts.bitnami.com/bitnami&quot;: { &quot;redis&quot;: &quot;18.5.0&quot; } }, &quot;git&quot;: [ &quot;MapColonies/helm-charts&quot;, &quot;MapColonies/jenkins-integration@multifiles&quot; ] }   The bundler pipeline will bundle all the artifacts (docker tar balls, helm packages, git repos) into 1 zip file.  ","version":"Next","tagName":"h2"},{"title":".bundlerrc Feature​","type":1,"pageTitle":"Bundler & Unbundler","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/bundler-unbundler#bundlerrc-feature","content":" Repositories that include a .bundlerrc file in their root directory will be processed with this file as a whitelist. Only the files and directories explicitly declared in the .bundlerrc file will be saved in the final ZIP file. Repositories without a .bundlerrc file will have their entire contents saved in the ZIP file.  .bundlerrc helm/ README.md scripts/   ","version":"Next","tagName":"h3"},{"title":"Slack notification​","type":1,"pageTitle":"Bundler & Unbundler","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/bundler-unbundler#slack-notification","content":" Once the bundler is done it'll send a slack message to the &lt;team&gt;-notifications channel based on the user logged in.    ","version":"Next","tagName":"h3"},{"title":"Unbundler pipeline​","type":1,"pageTitle":"Bundler & Unbundler","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/bundler-unbundler#unbundler-pipeline","content":" The unbundler pipeline is happening in other networks we have. After copying over the bundle file to the relevant network, there will be an unbundler pipeline on the jenkins.  The unbundler pipeline is performing the following:  For each docker tar ball it'll attempt to push the docker image with the same tag to all the docker registries available in all the sites.For each helm package it'll attempt to push the helm package with the same version and name to all the helm registries available in all the sites.For each git repository it'll attempt to open a PR/MR from the source master branch to the destination repository internally to the master branch. ","version":"Next","tagName":"h2"},{"title":"CI","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/ci","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"CI","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/ci#overview","content":" The CI (Continues Integration) pipelines are responsible for validating, compiling and building the artifacts and publishing them to the various registries.  ","version":"Next","tagName":"h2"},{"title":"Background​","type":1,"pageTitle":"CI","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/ci#background","content":" We store all our helm charts of all the teams under the helm-charts repository  This repository is a mono repo, where each team has it’s own scope. For example, 3D team has it’s own directory where the team is storing their helm charts.  Here’s the repo structure:  - / - 3D/ - Umbrella chart - deployment.json - artifacts.json - raster/ - Umbrella chart - deployment.json - artifacts.json   ","version":"Next","tagName":"h2"},{"title":"Release Workflow​","type":1,"pageTitle":"CI","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/ci#release-workflow","content":"   The release workflow begins with a new release or tag push on each service repository and is executed using Github Actions workflows.  The workflows are being triggered automatically. If we take a look at a sample repo store-trigger it has a workflow called Build and push artifacts , where the source of this can be found here  The workflow is building the docker image of the service, tagging it and pushing it to Azure ACR. Along with the docker image the flow also builds and pushes the helm package which is part of the repository. Afterwards it's updating the artifacts.json which is associated with the team's scope under the helm-charts repository with the new releases which have been just released. ","version":"Next","tagName":"h2"},{"title":"CD","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/cd","content":"","keywords":"","version":"Next"},{"title":"How to login?​","type":1,"pageTitle":"CD","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/cd#how-to-login","content":" Each team has their own set of credentials which they can use to login to the jenkins instance.  We have 2 options for deployment:  Manual deploymentAuto Deploy  ","version":"Next","tagName":"h3"},{"title":"Auto deployment​","type":1,"pageTitle":"CD","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/DevOps/pipelines/cd#auto-deployment","content":" The auto deployment process is currently monitoring the following branches: master and qa. On each commit to the helm-charts repository on the monitored branch the pipeline is kicking off.  The pipeline can be found here. As you can see in the overview page of the pipeline there are 2 branches which it's monitoring.    How the auto deploy pipeline is working?​  The pipeline is first of all looking at changes introduced in each commit with a git diff.After finding the diff it'll look at the deployment.json in the scope (each team's directory in the helm-charts repo) directories.Here's an example of deployment.json file.  [ { &quot;chartLocation&quot;: &quot;3d/charts/ingestion&quot;, &quot;valuesFile&quot;: [&quot;3d/charts/global-values.yaml&quot;, &quot;3d/charts/ingestion/ingestion-values.yaml&quot;], &quot;namespace&quot;: &quot;3d-dev&quot;, &quot;releaseName&quot;: &quot;ingestion-3d&quot;, &quot;skip&quot;: false }, { &quot;chartLocation&quot;: &quot;3d/charts/serving&quot;, &quot;valuesFile&quot;: [&quot;3d/charts/global-values.yaml&quot;, &quot;3d/charts/serving/serving-values.yaml&quot;], &quot;namespace&quot;: &quot;3d-dev&quot;, &quot;releaseName&quot;: &quot;serving-3d&quot;, &quot;skip&quot;: true } ]   If you wish to skip a deployment you'll need to have &quot;skip&quot;: true in the chart you wish to skip.When the pipeline will start it'll send a slack message to the &lt;team&gt;-notifications channel based on chart location(s) which are going to be deployed. After the pipeline will finish it'll send another message to the &lt;team&gt;-notifications channel based on chart location(s) which have been deployed with the status of the deployment. ","version":"Next","tagName":"h3"},{"title":"From Zero to Hero","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero","content":"","keywords":"","version":"Next"},{"title":"Assumptions​","type":1,"pageTitle":"From Zero to Hero","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero#assumptions","content":" This guide assumes that you have an already existing service based on the MapColonies boilerplate repo, and basic knowledge of JSON Schema. If needed you can read and learn about JSON Schema in the following link: https://json-schema.org/understanding-json-schema.  It is also recommended to read the schemas package readme.  ","version":"Next","tagName":"h3"},{"title":"Before we start​","type":1,"pageTitle":"From Zero to Hero","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero#before-we-start","content":" In general, the implementation of the MapColonies™ Config Management system consists of the following steps:  Work environment setup.Define a JSON Schema for your service configuration.Validating that the schema and the generated types are correct.Integrating the schema with your service. Below each step is explained in detail.  ","version":"Next","tagName":"h2"},{"title":"Initialize the work environment​","type":1,"pageTitle":"From Zero to Hero","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero#initialize-the-work-environment","content":" Clone the schemas repo into your own machine:  git clone git@github.com:MapColonies/schemas.git   Change the working directory.  cd schemas   Install the dependencies.  npm install   Create a new branch for your schema.  git branch &lt;my-branch-name&gt;   Open the repository in your editor (vscode for this guide).  code .   Create a file for your schema under the schemas folder. The directory hierarchy represents the ID of the schema. For example, a common schema that handles redis configuration might be under schemas/common/redis/v1.schema.json and its id will be https://mapcolonies.com/common/redis/v1. The file name is based on the order of the schema. If it's the first one, the name should be v1.schema.json, otherwise it should be the next number in order.  ","version":"Next","tagName":"h2"},{"title":"Creating the schema​","type":1,"pageTitle":"From Zero to Hero","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero#creating-the-schema","content":" Start by filling all the metadata for your JSON Schema. The more metadata you fill, it will be easier to understand and use your schema.  schemas/my-domain/my-schema/v1.schema.json { &quot;$id&quot;: &quot;https://mapcolonies.com/my-domain/my-schema/v1&quot;, &quot;type&quot;: &quot;object&quot;, &quot;title&quot;: &quot;myDomainMySchemaV1&quot;, &quot;description&quot;: &quot;My domain's schema&quot; }   Create your schema content. Use the official JSON Schema docs, The tips page and check other schemas in the repo for reference.  schemas/my-domain/my-schema/v1.schema.json { &quot;$id&quot;: &quot;https://mapcolonies.com/my-domain/my-schema/v1&quot;, &quot;type&quot;: &quot;object&quot;, &quot;title&quot;: &quot;myDomainMySchemaV1&quot;, &quot;description&quot;: &quot;My domain's schema&quot;, &quot;properties&quot;: { &quot;id&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The unique identifier for the entity&quot; }, &quot;name&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The name of the entity&quot; }, &quot;age&quot;: { &quot;type&quot;: &quot;integer&quot;, &quot;description&quot;: &quot;The age of the entity&quot;, &quot;x-env-value&quot;: &quot;ENTITY_AGE&quot; }, &quot;isAlive&quot;: { &quot;type&quot;: &quot;boolean&quot;, &quot;description&quot;: &quot;Is the entity alive&quot;, &quot;x-env-value&quot;: &quot;ENTITY_IS_ALIVE&quot; } } }   tip You can use x-env-value to enable overriding the value of a field using environment variable. For more information check out the relevant docs in config and schemas.  If we want our service schema to extend the base boilerplate schema we could do this like that:  { &quot;$id&quot;: &quot;https://mapcolonies.com/my-domain/my-schema/v1&quot;, &quot;type&quot;: &quot;object&quot;, &quot;title&quot;: &quot;myDomainMySchemaV1&quot;, &quot;description&quot;: &quot;My domain's schema&quot;, &quot;allOf&quot;: [ { &quot;$ref&quot;: &quot;https://mapcolonies.com/common/boilerplate/v2&quot; }, { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;myDomain&quot;: { &quot;$ref&quot;: &quot;#/definitions/myDomainMySchemaV1&quot; } } } ], &quot;definitions&quot;: { &quot;myDomainMySchemaV1&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;id&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The unique identifier for the entity&quot; }, &quot;name&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The name of the entity&quot; }, &quot;age&quot;: { &quot;type&quot;: &quot;integer&quot;, &quot;description&quot;: &quot;The age of the entity&quot;, &quot;x-env-value&quot;: &quot;ENTITY_AGE&quot; }, &quot;isAlive&quot;: { &quot;type&quot;: &quot;boolean&quot;, &quot;description&quot;: &quot;Is the entity alive&quot;, &quot;x-env-value&quot;: &quot;ENTITY_IS_ALIVE&quot; } } } } }    The result is a combined object with both the boilerplate schema and our own properties.  important When extending the boilerplate, you should check and make sure you extend the newest version. The version in this guide might be older.  ","version":"Next","tagName":"h2"},{"title":"Run validations​","type":1,"pageTitle":"From Zero to Hero","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero#run-validations","content":" We want to make sure that the schema are valid, therefore we need to check the schema for errors. To do so we can run the following command and make changes based on the feedback.  npm run validate   info To see all the validations check the following doc: https://github.com/MapColonies/schemas?tab=readme-ov-file#validations  ","version":"Next","tagName":"h2"},{"title":"Validating the types​","type":1,"pageTitle":"From Zero to Hero","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero#validating-the-types","content":" The types that the schemas package exports are automatically generated from the json schema. We want to make sure that the types are correct before we move forward. This way we can check the types and if anything is wrong go back and fix the schema.  Build the package:  npm run build   Check that the types are as you expected. They can be found under the build directory under the same hierarchy as the schema. For example, those are the types generated for the schema we created above extending the boilerplate schema:  build/schemas/my-domain/my-schema/v1.schema.d.ts import { typeSymbol } from '../../symbol.js'; declare const exported: { readonly [typeSymbol]: { [x: string]: unknown; myDomain?: { [x: string]: unknown; id?: string | undefined; name?: string | undefined; age?: number | undefined; isAlive?: boolean | undefined; } | undefined; openapiConfig: { [x: string]: unknown; filePath: string; basePath: string; rawPath: string; uiPath: string; }; telemetry: { [x: string]: unknown; logger: { [x: string]: unknown; level: &quot;info&quot; | &quot;trace&quot; | &quot;debug&quot; | &quot;warn&quot; | &quot;error&quot; | &quot;fatal&quot;; prettyPrint: boolean; }; shared: { [x: string]: unknown; serviceName?: string | undefined; serviceVersion?: string | undefined; hostname?: string | undefined; }; tracing: { [x: string]: unknown; debug?: boolean | undefined; url?: string | undefined; traceRatio?: number | undefined; isEnabled: boolean; }; }; server: { [x: string]: unknown; port: number; request: { [x: string]: unknown; payload: { [x: string]: unknown; limit: string; }; }; }; }; ...   note The rest of the file is important for the inner working of the schemas package. You should check only the types.  ","version":"Next","tagName":"h2"},{"title":"Checking integration with your service​","type":1,"pageTitle":"From Zero to Hero","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero#checking-integration-with-your-service","content":" Before merging the changes you made, we want to make sure it works with your service.  install the development version of the schemas package into your service. There are multiple ways to achieve that, with some of them described below.  GithubLocal PathNPM PackOther Options When opening a PR in the schemas repo, the latest version of your branch will be built and be available for a week. Push your changes to the remote repository. git push --set-upstream origin &lt;my-branch-name&gt; Open a PR in the schemas repo.If all the validations pass, a comment will appear with instructions and link to the package.Insert the link into your service's package.json file. package.json { &quot;dependencies&quot;: { &quot;@map-colonies/schemas&quot;: &lt;insert-generated-link&gt; } } Install the package. npm install     Change the config in your service to use the new schema.  src/common/config.ts import { type ConfigInstance, config } from '@map-colonies/config'; import { &lt;your-new-schema&gt;, type [your-new-schema-type] } from '@map-colonies/schemas'; // Choose here the type of the config instance and import this type from the entire application type ConfigType = ConfigInstance&lt;[your-new-schema-type]&gt;; let configInstance: ConfigType | undefined; /** * Initializes the configuration by fetching it from the server. * This should only be called from the instrumentation file. * @returns A Promise that resolves when the configuration is successfully initialized. */ async function initConfig(offlineMode?:boolean): Promise&lt;void&gt; { configInstance = await config({ configName: 'boiler-config', configServerUrl: 'http://localhost:8080', schema: &lt;your-new-schema&gt;, version: 'latest', offlineMode: offlineMode }); }   Check that the service works as expected.  ","version":"Next","tagName":"h2"},{"title":"Next steps​","type":1,"pageTitle":"From Zero to Hero","url":"/infra-portal/pr-preview/pr-40/docs/guides/config-management/zero-to-hero#next-steps","content":" Now that you finished writing your schema, you can submit a PR to the schemas repo and ask for it to be reviewed.  You can also check the default configs guide to learn how to define default configs for your schema.  We hope this guide was helpful and you were able to integrate the MapColonies™ Config Management system into your service.  If you have any questions or need help, feel free to ask for help.  If you have any suggestions for this guide, please open a pull request. ","version":"Next","tagName":"h2"},{"title":"Monitoring Stack Overview","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring","content":"Monitoring Stack Overview The monitoring stack is a Kubernetes-based stack used to observe, monitor, and alert on the health and performance metrics. It leverages open-source tools, including Prometheus, Grafana, Blackbox Exporter, Alertmanager, and OpenTelemetry.","keywords":"","version":"Next"},{"title":"Alertmanager","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Alertmanager","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Alertmanager","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Alertmanager#overview","content":" Alertmanager is responsible for handling and routing alerts generated by Prometheus. It manages alert notifications by grouping, routing, and sending alerts to channels such as Slack, email, or other messaging platforms. This helps reduce alert noise and ensures that the correct teams are notified.  The system supports alerts categorized by:  Severity: Critical, Warning, and Info levels.Environment: Alerts can be tagged with production, staging, or development to indicate the context.Service Labels: Alerts often include labels like service and team to provide clarity on the affected component.  tip You can read more about Alertmanager in the Alertmanager documentation  ","version":"Next","tagName":"h2"},{"title":"Home Screen Overview​","type":1,"pageTitle":"Alertmanager","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Alertmanager#home-screen-overview","content":" You can access Libot's Alertmanager at the MapColonies Alertmanager.  The Alertmanager home screen provides an overview of active alerts, alert groups, and their status. You can see how alerts are routed, which notifications are being sent, and to whom.    ","version":"Next","tagName":"h2"},{"title":"Alert Routing​","type":1,"pageTitle":"Alertmanager","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Alertmanager#alert-routing","content":" Alertmanager enables you to define routes that determine where alerts should be sent, based on labels such as alert severity or environment. It supports routing alerts to various platforms, including Slack, classified chat systems, and email.  note The routing configuration is global and centrally managed by the infra team. Developers do not need to configure routing themselves. If you have specific requirements or changes, contact the infra team to discuss adjustments to the global configuration.  ","version":"Next","tagName":"h2"},{"title":"Managing Alerts​","type":1,"pageTitle":"Alertmanager","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Alertmanager#managing-alerts","content":" Alerts can be managed in the Alertmanager UI, where you can silence, group, and view the history of all alerts. Here's an example of an active alert in the system:    ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Alertmanager","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Alertmanager#conclusion","content":" Alertmanager is crucial in ensuring the right people are notified in the right way, reducing noise and keeping alerts manageable. With routing and grouping options, you can finely tune how your team receives and handles critical issues. ","version":"Next","tagName":"h2"},{"title":"OpenTelemetry Collector","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/OpenTelemetryCollector","content":"","keywords":"","version":"Next"},{"title":"Example: Collecting Traces​","type":1,"pageTitle":"OpenTelemetry Collector","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/OpenTelemetryCollector#example-collecting-traces","content":" To collect distributed traces from your services and send them to Grafana Tempo for visualization, you need to configure the OpenTelemetry Collector to receive and export traces. Here’s an example configuration:  tracing: enabled: true url: http://infra-monitoring-opentelemetry-collector.infra-services.svc.cluster.local:4317   ","version":"Next","tagName":"h2"},{"title":"Sampling in OpenTelemetry​","type":1,"pageTitle":"OpenTelemetry Collector","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/OpenTelemetryCollector#sampling-in-opentelemetry","content":" Sampling controls which traces are collected and exported to manage data volume. Common strategies include: head sampling (deciding at the start of a trace) and tail sampling (deciding after the trace completes). This helps balance observability with resource efficiency. ","version":"Next","tagName":"h2"},{"title":"BlackBox Exporter","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/BlackBox","content":"","keywords":"","version":"Next"},{"title":"Scrape Setup​","type":1,"pageTitle":"BlackBox Exporter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/BlackBox#scrape-setup","content":" To scrape your endpoint, you need to create an entry in this section of the prometheus.yml configuration:  Scrape Config extraScrapeConfigs: | - job_name: 'blackbox' metrics_path: /probe scrape_interval: 15s params: module: [http_2xx] # Look for an HTTP 200 response. static_configs: - targets: - https://your-endpoint.com - https://another-endpoint.com   Key Configuration Elements job_name: The name of the scrape job (blackbox in this example) used to identify the probe.metrics_path: Specifies the path for scraping metrics. The Blackbox Exporter's metrics are available at /probe.scrape_interval: Defines how often Prometheus will probe the endpoints. Here, it probes every 15 seconds.params: Parameters passed to the probe. For instance, module: [http_2xx] ensures the probe checks for a successful HTTP 200 response.static_configs: Lists the endpoints to probe.  To add, update, or remove an endpoint to scrape, or to modify an entire scrape job, you need to create a pull requesthere. After that, please notify the infra team for a review and upgrade.  ","version":"Next","tagName":"h2"},{"title":"Alerting​","type":1,"pageTitle":"BlackBox Exporter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/BlackBox#alerting","content":" After setting up scraping with the Blackbox Exporter, you may want to configure alerts to monitor the health and performance of the scraped endpoints. For more details about setting up alerts with Prometheus, see the Prometheus Alerts section. ","version":"Next","tagName":"h2"},{"title":"Grafana","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Grafana","content":"","keywords":"","version":"Next"},{"title":"Multiple Data Sources​","type":1,"pageTitle":"Grafana","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Grafana#multiple-data-sources","content":" Grafana supports connecting to multiple data sources, allowing you to visualize and analyze data from various platforms like Prometheus, Elasticsearch, and Tempo in to a single dashboard.  For a full list of supported data sources, check out the Grafana documentation on data sources. ","version":"Next","tagName":"h2"},{"title":"Grafana Tempo","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Tempo","content":"","keywords":"","version":"Next"},{"title":"Example: Visualizing Traces​","type":1,"pageTitle":"Grafana Tempo","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Tempo#example-visualizing-traces","content":" Once the OpenTelemetry Collector sends traces to Tempo, you can view and analyze these traces in Grafana.   ","version":"Next","tagName":"h2"},{"title":"Prometheus","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Prometheus","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Prometheus","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Prometheus#overview","content":" Prometheus is an open-source monitoring and alerting system designed to collect and store metrics as time series data. It scrapes metrics from targets like applications pods and servers, stores them with the timestamp and labels and allows querying using PromQL. Prometheus is commonly used to track system performance and set up alerts based on defined conditions.  tip You can read more about Prometheus in the Prometheus documentation  ","version":"Next","tagName":"h2"},{"title":"Home Screen Overview​","type":1,"pageTitle":"Prometheus","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Prometheus#home-screen-overview","content":" You can access Libot's Prometheus at https://prometheus.mapcolonies.net.  The Prometheus home screen provides an overview of the current status of the Prometheus server. Here, you can see the targets that are being monitored, the current configuration of Prometheus, and access the built-in query interface.    ","version":"Next","tagName":"h2"},{"title":"Prometheus Scrape Configuration​","type":1,"pageTitle":"Prometheus","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Prometheus#prometheus-scrape-configuration","content":" Prometheus scrapes metrics from pods if they are in specific namespaces, properly annotated, and expose metrics on the specified port.  ","version":"Next","tagName":"h2"},{"title":"Configuring Your Service for Prometheus Scraping​","type":1,"pageTitle":"Prometheus","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Prometheus#configuring-your-service-for-prometheus-scraping","content":" To ensure your pod is scraped, it should be deployed in one of the listed namespaces and annotated correctly. The required annotation looks like this:   podAnnotations: prometheus.io/scrape: &quot;true&quot; prometheus.io/port: &quot;10000&quot;   ","version":"Next","tagName":"h3"},{"title":"Prometheus Alerts​","type":1,"pageTitle":"Prometheus","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/monitoring/Prometheus#prometheus-alerts","content":" tip You can access the official Prometheus alerting documentation  Prometheus Alerts are rules defined in Prometheus that automatically trigger notifications when certain conditions are met, such as high CPU usage or service downtime.    These alert rules are defined in Prometheus' configuration and are automatically evaluated.  Alerts Config alerting_rules.yml: groups: - name: blackbox_alerts rules: - alert: CertExpiration expr: ((probe_ssl_earliest_cert_expiry{job=&quot;blackbox&quot;} - time()) / 3600 / 24 &lt; 30) for: 90s labels: severity: 'critical' annotations: description: &quot;A certificate ({{ $labels.instance }}) is about to expire in 30 days!&quot; summary: &quot;A certificate ({{ $labels.instance }}) is about to expire in 30 days!&quot;   Key Fields in Prometheus Alert Configuration groups: Organizes alerts into logical groups. Alerts within the same group are evaluated together.alert: The name of the alert, which should describe the issue it triggers.expr: The PromQL expression that defines when the alert should be triggered. If the expression evaluates as true, the alert fires.for: The amount of time the condition must be met before triggering the alert.labels: Additional labels that provide context or are used for routing in Alertmanager.annotations: Human-readable descriptions or summaries of the alert.  To add, update, or remove an alert, you need to create a pull request in the repositoryhere. After that, please notify the infra team for a review and upgrade. ","version":"Next","tagName":"h2"},{"title":"commitlint-config","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/commitlint-config","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"commitlint-config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/commitlint-config#installation","content":" To install the package run the following command:  npm install --save-dev @mapcolonies/commitlint-config   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"commitlint-config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/commitlint-config#usage","content":" To use the package, create a commitlint.config.js file in the root of your project and add the following code:  module.exports = { extends: ['@mapcolonies/commitlint-config'], };   ","version":"Next","tagName":"h2"},{"title":"Rules​","type":1,"pageTitle":"commitlint-config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/commitlint-config#rules","content":" This package extends all the rules from the @commitlint/config-conventional package and adds the following rules:  The allowed values for the type parameters (feat,fix,chore..) are as follow: deps, helm, build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/commitlint-config/blob/master/README.md ","version":"Next","tagName":"h2"},{"title":"error-express-handler","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler","content":"","keywords":"","version":"Next"},{"title":"Install​","type":1,"pageTitle":"error-express-handler","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler#install","content":" npm install --save @map-colonies/error-express-handler   ","version":"Next","tagName":"h2"},{"title":"API documentation​","type":1,"pageTitle":"error-express-handler","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler#api-documentation","content":" Check the autogenerated documentation here.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"error-express-handler","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler#usage","content":" Add the handler as the last middleware, so any error forwarded by the controllers will be handled. If the value of NODE_ENV is production the error message will be redacted and a generic one will be sent instead. In development, in addition to the error message, the stack trace of the error will be included in the response.  import express from 'express'; import { getErrorHandlerMiddleware } from '@map-colonies/error-express-handler'; process.env.NODE_ENV = 'development'; const app = express(); app.use('/meow', fn); app.use(getErrorHandlerMiddleware()); app.listen(8080, function() { console.log('server is up'); });   ","version":"Next","tagName":"h2"},{"title":"Flow​","type":1,"pageTitle":"error-express-handler","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler#flow","content":"   note This page was generated from a remote source. you can find it on https://github.com/MapColonies/error-express-handler/blob/master/README.md ","version":"Next","tagName":"h2"},{"title":"index","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc","content":"","keywords":"","version":"Next"},{"title":"Interfaces​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc#interfaces","content":" ErrorResponseHttpError  ","version":"Next","tagName":"h2"},{"title":"Functions​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc#functions","content":" getErrorHandlerMiddleware ","version":"Next","tagName":"h2"},{"title":"JSON Schema Tips","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips","content":"","keywords":"","version":"Next"},{"title":"Metadata​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#metadata","content":" You should use the title and description keywords to provide a description of the schema. This will help users understand what the schema is for.  { &quot;title&quot;: &quot;My Schema&quot;, &quot;description&quot;: &quot;This is a schema for my app&quot; }   ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#examples","content":" You can provide examples of how the schema should be used by using the examples keyword.  { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; } }, &quot;examples&quot;: { &quot;name&quot;: &quot;John Doe&quot; } }   ","version":"Next","tagName":"h2"},{"title":"Comments​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#comments","content":" You can use the $comment keyword to provide comments in the schema. This can be useful for providing additional information about the schema.  { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; } }, &quot;$comment&quot;: &quot;This is a schema for my app&quot; }   For more information check the relevant JSON Schema Docs  ","version":"Next","tagName":"h2"},{"title":"Default​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#default","content":" When you have a default value for a property, you can use the default keyword to set it. This is useful for when you want to provide a default value for a property that is not required.  { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;default&quot;: &quot;John Doe&quot; } } }   The value will be provided by the config even if it is not set.  ","version":"Next","tagName":"h2"},{"title":"Required​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#required","content":" You can use the required keyword to specify which properties are required in the schema. By default, all properties are optional.  { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; } }, &quot;required&quot;: [&quot;name&quot;] }   The types generated for the schema will reflect the required properties.  type MySchema = { name: string; };   ","version":"Next","tagName":"h2"},{"title":"Enums​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#enums","content":" You can use the enum keyword to specify a list of possible values for a property. It is not required to specify the type of the property when using enum, so its possible for the enum to be of different types.  { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;color&quot;: { &quot;enum&quot;: [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] } } }   The types generated will be a union of the enum values.  type MySchema = { color: &quot;red&quot; | &quot;green&quot; | &quot;blue&quot;; };   ","version":"Next","tagName":"h2"},{"title":"Refs​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#refs","content":" You can use the $ref keyword to reference another schema. The references can be either internal or external.  Reference can be used to reuse schemas and keep the schema definitions clean. Even for small schemas like Id, it is a good practice to use refs.  ","version":"Next","tagName":"h2"},{"title":"Internal Refs​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#internal-refs","content":" { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;$ref&quot;: &quot;#/definitions/name&quot; } }, &quot;definitions&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; } } }   ","version":"Next","tagName":"h3"},{"title":"External Refs​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#external-refs","content":" External refs are only valid to other schemas that are defined in the schemas repository. The way to reference is to use the ID of required the schema.  { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;$ref&quot;: &quot;https://mapcolonies.com/common/schema/v1&quot; } } }   ","version":"Next","tagName":"h3"},{"title":"Definitions​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#definitions","content":" You can use the definitions keyword to define reusable schemas. The definitions are not part of the validated schema, unless they are referenced.  { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;$ref&quot;: &quot;#/definitions/name&quot; } }, &quot;definitions&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; } } }   ","version":"Next","tagName":"h2"},{"title":"Schema Composition​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#schema-composition","content":" In many cases you will want to compose multiple schemas together. JSON Schema provides a few keywords to help with this. This way you can reuse schemas and keep the schema definitions clean.  The classic example in our case is to extends the boilerplate schema to fit our service.  For more information check the relevant JSON Schema Docs  ","version":"Next","tagName":"h2"},{"title":"AllOf​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#allof","content":" The allOf keyword is used to combine multiple schemas together. The properties of the schemas are merged together.  The following schema  { &quot;allOf&quot;: [ { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; } } }, { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;age&quot;: { &quot;type&quot;: &quot;number&quot; } } } ] }   Will be equivalent to the following schema  { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;age&quot;: { &quot;type&quot;: &quot;number&quot; } } }   important When using additionalProperties: false in the schemas, the allOf keyword will not merge the properties together. Instead, it will require that all properties are present in the schema, Which is not possible. Check the JSON Schema Docs for more information.  ","version":"Next","tagName":"h3"},{"title":"OneOf​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#oneof","content":" The oneOf keyword is used to specify that only one of the schemas should be valid.  The following schema  { &quot;oneOf&quot;: [ { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; } } }, { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;age&quot;: { &quot;type&quot;: &quot;number&quot; } } } ] }   If both properties are provided, the schema will be invalid.  Using oneOf with discriminators​  The discriminator keyword (introduced in JSON Schema draft 2019-09) enhances oneOf by explicitly identifying which property determines the correct schema to use. This is particularly valuable for polymorphic data structures where different object types have different property requirements and default values.  { &quot;storage&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;discriminator&quot;: { &quot;propertyName&quot;: &quot;provider&quot; }, &quot;required&quot;: [&quot;provider&quot;], &quot;oneOf&quot;: [ { &quot;properties&quot;: { &quot;provider&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;const&quot;: &quot;s3&quot; }, &quot;credentials&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;default&quot;: &quot;someExampleValue&quot; } } }, { &quot;properties&quot;: { &quot;provider&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;const&quot;: &quot;fs&quot; }, &quot;credentials&quot;: { &quot;type&quot;: &quot;number&quot;, &quot;default&quot;: 100 } } } ] } }   In this example, the discriminator.propertyName value of &quot;provider&quot; indicates which property identifies the appropriate schema. When provider equals &quot;s3&quot;, the validator knows to use the first schema (where credentials is a string defaulting to &quot;someExampleValue&quot;). When provider equals &quot;fs&quot;, it uses the second schema (where credentials is a number defaulting to 100).  Without a discriminator, the validator would need to try each schema sequentially, which is less efficient and produces less specific error messages. The discriminator pattern also enables type-safe handling of different object variants in strongly-typed languages.  note Note that while the default keyword specifies default values for each variant, not all JSON Schema validators or tools automatically apply these defaults. Some may treat them as annotations only. Check your validation library's documentation for how defaults are handled.  For more documentation on discriminators, see the Ajv JSON Schema documentation.  ","version":"Next","tagName":"h3"},{"title":"Strings​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#strings","content":" ","version":"Next","tagName":"h2"},{"title":"Formats​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#formats","content":" It is recommended to use the format keyword to specify the format of the string. This will help users understand what the string is for and validate accordingly.  { &quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;email&quot; }   For a full list of formats check the ajv-formats repository.  ","version":"Next","tagName":"h3"},{"title":"Patterns​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#patterns","content":" You can use the pattern keyword to specify a regular expression that the string should match.  { &quot;type&quot;: &quot;string&quot;, &quot;pattern&quot;: &quot;^[a-zA-Z]+$&quot; }   ","version":"Next","tagName":"h3"},{"title":"Const​","type":1,"pageTitle":"JSON Schema Tips","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/json-schema/json-schema-tips#const","content":" You can use the const keyword to specify a constant value for the string.  { &quot;type&quot;: &quot;string&quot;, &quot;const&quot;: &quot;John Doe&quot; }  ","version":"Next","tagName":"h3"},{"title":"getErrorHandlerMiddleware","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/functions/getErrorHandlerMiddleware","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"getErrorHandlerMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/functions/getErrorHandlerMiddleware#returns","content":" ErrorRequestHandler  An Express error-handling middleware function.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"getErrorHandlerMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/functions/getErrorHandlerMiddleware#example","content":" import express from 'express'; import { getErrorHandlerMiddleware } from './path/to/this/module'; const app = express(); // Other middleware and routes // Error handling middleware should be added last app.use(getErrorHandlerMiddleware()); app.listen(3000, () =&gt; { console.log('Server is running on port 3000'); });  ","version":"Next","tagName":"h2"},{"title":"Config","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config","content":"","keywords":"","version":"Next"},{"title":"API documentation​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#api-documentation","content":" Check the autogenerated documentation here.  Usage  import { config } from '@map-colonies/config'; import { commonBoilerplateV4 } from '@map-colonies/schemas'; const configInstance = await config({ configName: 'boiler-config', configServerUrl: 'http://localhost:8080', schema: commonBoilerplateV4, version: 'latest', offlineMode: false }); const port = configInstance.get('server.port');   ","version":"Next","tagName":"h2"},{"title":"API Documentation​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#api-documentation-1","content":" This section describes the API provided by the package for interacting with the configuration.  ","version":"Next","tagName":"h2"},{"title":"ConfigInstance<T>​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#configinstancet","content":" The ConfigInstance interface represents the your way to interact with the configuration. It provides methods to retrieve configuration values and parts.T is the typescript type associated with the chosen schema. it can be imported from the @map-colonies/schemas package.  Methods​  get&lt;TPath extends string&gt;(path: TPath): _.GetFieldType&lt;T, TPath&gt;​  Description: Retrieves the value at the specified path from the configuration object. Note that the type of returned object is based on the path in the schema.Parameters: path (TPath): The path to the desired value. Returns: The value at the specified path.  getAll(): T​  Description: Retrieves the entire configuration object.Returns: The entire configuration object.  getConfigParts(): { localConfig: object; config: object; envConfig: object }​  Description: Retrieves different parts of the configuration object before being merged and validated. Useful for debugging.Returns: An object containing the localConfig, config, and envConfig parts of the configuration. localConfig: The local configuration object.config: The remote configuration object.envConfig: The environment configuration object.  getResolvedOptions(): BaseOptions​  Description: Retrieves the resolved options from the configuration object. Useful for debugging.Returns: The resolved options, which are an instance of BaseOptions.  initializeMetrics(registry: promClient.Registry): void​  Description: Initializes the metrics for the configuration.Parameters: registry (promClient.Registry): The prometheus registry to use for the metrics.  Configuration Options  This package allows you to configure various options for loading and managing configurations. Below are the available options and their descriptions.  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#options","content":" ","version":"Next","tagName":"h2"},{"title":"schema​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#schema","content":" Type: T extends SchemaWithTypeOptional: falseDescription: The schema of the configuration object.  ","version":"Next","tagName":"h3"},{"title":"configName​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#configname","content":" Type: stringOptional: trueDescription: The name of the remote configuration.Environment Variable: CONFIG_NAME  ","version":"Next","tagName":"h3"},{"title":"version​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#version","content":" Type: 'latest' | numberOptional: trueDefault: latestDescription: The version of the remote configuration. It can be either 'latest' or a number.Environment Variable: CONFIG_VERSION  ","version":"Next","tagName":"h3"},{"title":"configServerUrl​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#configserverurl","content":" Type: stringOptional: trueDefault: http://localhost:8080Description: The URL of the configuration server.Environment Variable: CONFIG_SERVER_URL  ","version":"Next","tagName":"h3"},{"title":"offlineMode​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#offlinemode","content":" Type: booleanOptional: trueDefault: falseDescription: Indicates whether the configuration should be loaded in offline mode.Environment Variable: CONFIG_OFFLINE_MODE  ","version":"Next","tagName":"h3"},{"title":"ignoreServerIsOlderVersionError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#ignoreserverisolderversionerror","content":" Type: booleanOptional: trueDescription: Indicates whether to ignore the error when the server version is older than the requested version.Environment Variable: CONFIG_IGNORE_SERVER_IS_OLDER_VERSION_ERROR  ","version":"Next","tagName":"h3"},{"title":"localConfigPath​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#localconfigpath","content":" Type: stringOptional: trueDefault: ./configDescription: The path to the local configuration folder.  ","version":"Next","tagName":"h3"},{"title":"Environment Variable Configuration​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#environment-variable-configuration","content":" The following environment variables can be used to configure the options:  CONFIG_NAME: Sets the configName option.CONFIG_VERSION: Sets the version option.CONFIG_SERVER_URL: Sets the configServerUrl option.CONFIG_OFFLINE_MODE: Sets the offlineMode option.CONFIG_IGNORE_SERVER_IS_OLDER_VERSION_ERROR: Sets the ignoreServerIsOlderVersionError option.  ","version":"Next","tagName":"h2"},{"title":"Configuration Merging and Validation​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#configuration-merging-and-validation","content":" The package supports merging configurations from multiple sources (local, remote, and environment variables) and then validates the merged configuration against the schema.  ","version":"Next","tagName":"h2"},{"title":"Local Configuration​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#local-configuration","content":" The local configuration is loaded from the path specified by the localConfigPath option. The default path is ./config.  ","version":"Next","tagName":"h3"},{"title":"Remote Configuration​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#remote-configuration","content":" The remote configuration is fetched from the server specified by the configServerUrl option.If the version is set to 'latest', the latest version of the configuration is fetched. Otherwise, the specified version is fetched.  ","version":"Next","tagName":"h3"},{"title":"Environment Variables​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#environment-variables","content":" Configuration options can be overridden by setting the corresponding environment variables as described in schema using the x-env-value key. If an environment variable is set, it takes precedence over the value from the remote or local configuration., If the value of the x-env-format key is json, the environment variable value is parsed as JSON.  ","version":"Next","tagName":"h3"},{"title":"Merging Configurations​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#merging-configurations","content":" The configurations are merged in the following order of precedence: Environment variablesRemote configurationLocal configuration If a configuration option is specified in multiple sources, the value from the source with higher precedence (as listed above) is used.  ","version":"Next","tagName":"h3"},{"title":"Validation​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#validation","content":" After merging, the final configuration is validated against the defined schema using ajv.The validation ensures that all required properties are present, and the types and values of properties conform to the schema.Any default value according to the schema is added to the final object.If the validation fails, an error is thrown, indicating the invalid properties and their issues.  Error handling  This section describes the possible errors that can occur when using the package, along with their codes and payload structures.  ","version":"Next","tagName":"h3"},{"title":"Identifying errors​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#identifying-errors","content":" The package exposes a helper function called isConfigError to assert what is the error that was thrown and handle it as needed.  import { config, isConfigError } from '@map-colonies/config'; try { const configInstance = await config({ configName: 'boiler-config', configServerUrl: 'http://localhost:8080', schema: commonBoilerplateV4, version: 'latest', offlineMode: false }); } catch (error) { if (isConfigError(error, 'configValidationError')) { console.error('Config validation error:', error.payload); } }   ","version":"Next","tagName":"h2"},{"title":"Errors​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#errors","content":" ","version":"Next","tagName":"h2"},{"title":"optionValidationError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#optionvalidationerror","content":" Code: 1Payload: ValidationError[]Description: This error occurs when there is a validation error with one of the configuration options.  ","version":"Next","tagName":"h3"},{"title":"configValidationError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#configvalidationerror","content":" Code: 2Payload: ValidationError[]Description: This error occurs when the configuration as a whole fails validation.  ","version":"Next","tagName":"h3"},{"title":"httpResponseError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#httpresponseerror","content":" Code: 3Payload: { headers: Record&lt;string, string&gt;; statusCode: number; body: string; } Description: This error occurs when an HTTP request results in an error response. The payload includes the response headers, status code and body.  ","version":"Next","tagName":"h3"},{"title":"httpGeneralError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#httpgeneralerror","content":" Code: 4Payload: ErrorDescription: This error occurs when there is a general HTTP error. The payload contains the error object.  ","version":"Next","tagName":"h3"},{"title":"schemaNotFoundError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#schemanotfounderror","content":" Code: 5Payload: { schemaPath: string; } Description: This error occurs when the specified schema cannot be found. The payload includes the path of the missing schema.  ","version":"Next","tagName":"h3"},{"title":"schemasPackageVersionMismatchError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#schemaspackageversionmismatcherror","content":" Code: 6Payload: { remotePackageVersion: string; localPackageVersion: string; } Description: This error occurs when there is a version mismatch between the remote and local schema packages. The payload includes the versions of both the remote and local packages.  ","version":"Next","tagName":"h3"},{"title":"schemaVersionMismatchError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#schemaversionmismatcherror","content":" Code: 7Payload: { remoteSchemaVersion: string; localSchemaVersion: string; } Description: This error occurs when there is a version mismatch between the remote and local schemas. The payload includes the versions of both the remote and local schemas.  ","version":"Next","tagName":"h3"},{"title":"promClientNotInstalledError​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#promclientnotinstallederror","content":" Code: 8Payload: ErrorDescription: This error occurs when the prom-client package is not installed. The payload contains the error object.  Debugging  If for some reason you want to debug the package you can either use the getConfigParts or the getResolvedOptions functions described in the API or use the more powerful debug logger.  The package debug logger is implemented using the debug npm package and is configured using the DEBUG Environment variable.  The following are the values you can configure to use the debug option.  ","version":"Next","tagName":"h3"},{"title":"DEBUG=*​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#debug","content":" Enables all the logs. Note that setting this option might enable debug logging of other packages.  ","version":"Next","tagName":"h3"},{"title":"DEBUG=@map-colonies/config*​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#debugmap-coloniesconfig","content":" Enables all the logs available in this package.  ","version":"Next","tagName":"h3"},{"title":"DEBUG=@map-colonies/config:config​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#debugmap-coloniesconfigconfig","content":" Enables only the logs related to the main logic of the package.  ","version":"Next","tagName":"h3"},{"title":"DEBUG=@map-colonies/config:env​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#debugmap-coloniesconfigenv","content":" Enables only the logs related to parsing environment variables from schemas, and retrieving them for use in the configuration.  ","version":"Next","tagName":"h3"},{"title":"DEBUG=@map-colonies/config:http​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#debugmap-coloniesconfighttp","content":" Enables only the logs related to http requests to the config-server.  ","version":"Next","tagName":"h3"},{"title":"DEBUG=@map-colonies/config:options​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#debugmap-coloniesconfigoptions","content":" Enables only the logs related to parsing and validation of the package initialization options.  ","version":"Next","tagName":"h3"},{"title":"DEBUG=@map-colonies/config:schemas​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#debugmap-coloniesconfigschemas","content":" Enables only the logs related to the retrieving of schemas.  ","version":"Next","tagName":"h3"},{"title":"DEBUG=@map-colonies/config:validator​","type":1,"pageTitle":"Config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/config#debugmap-coloniesconfigvalidator","content":" Enables only the logs related to the validation of configurations.  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/config/blob/master/README.md ","version":"Next","tagName":"h3"},{"title":"ErrorResponse","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/ErrorResponse","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"ErrorResponse","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/ErrorResponse#properties","content":" ","version":"Next","tagName":"h2"},{"title":"message​","type":1,"pageTitle":"ErrorResponse","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/ErrorResponse#message","content":" message: string  Defined in: index.ts:23    ","version":"Next","tagName":"h3"},{"title":"stacktrace?​","type":1,"pageTitle":"ErrorResponse","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/ErrorResponse#stacktrace","content":" optional stacktrace: string  Defined in: index.ts:24 ","version":"Next","tagName":"h3"},{"title":"HttpError","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"HttpError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError#extends","content":" Error  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"HttpError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError#properties","content":" ","version":"Next","tagName":"h2"},{"title":"cause?​","type":1,"pageTitle":"HttpError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError#cause","content":" optional cause: unknown  Defined in: ../../../../home/runner/work/infra-portal/infra-portal/node_modules/typescript/lib/lib.es2022.error.d.ts:24  Inherited from​  Error.cause    ","version":"Next","tagName":"h3"},{"title":"message​","type":1,"pageTitle":"HttpError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError#message","content":" message: string  Defined in: ../../../../home/runner/work/infra-portal/infra-portal/node_modules/typescript/lib/lib.es5.d.ts:1077  Inherited from​  Error.message    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"HttpError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError#name","content":" name: string  Defined in: ../../../../home/runner/work/infra-portal/infra-portal/node_modules/typescript/lib/lib.es5.d.ts:1076  Inherited from​  Error.name    ","version":"Next","tagName":"h3"},{"title":"stack?​","type":1,"pageTitle":"HttpError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError#stack","content":" optional stack: string  Defined in: ../../../../home/runner/work/infra-portal/infra-portal/node_modules/typescript/lib/lib.es5.d.ts:1078  Inherited from​  Error.stack    ","version":"Next","tagName":"h3"},{"title":"status?​","type":1,"pageTitle":"HttpError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError#status","content":" optional status: StatusCodes  Defined in: index.ts:15  Alternative property for HTTP status code    ","version":"Next","tagName":"h3"},{"title":"statusCode?​","type":1,"pageTitle":"HttpError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/error-express-handler/typedoc/interfaces/HttpError#statuscode","content":" optional statusCode: StatusCodes  Defined in: index.ts:14  The HTTP status code for the error response ","version":"Next","tagName":"h3"},{"title":"index","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc","content":"","keywords":"","version":"Next"},{"title":"Interfaces​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc#interfaces","content":" Options  ","version":"Next","tagName":"h2"},{"title":"Functions​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc#functions","content":" default ","version":"Next","tagName":"h2"},{"title":"ESLint config","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config","content":"","keywords":"","version":"Next"},{"title":"Available Configs​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#available-configs","content":" ts-base: base configurations for TypeScript.React: rules for React (extends react-app).Jest: rules for Jest.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#installation","content":" ","version":"Next","tagName":"h2"},{"title":"base​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#base","content":" $ npm install --save-dev eslint @map-colonies/eslint-config   ","version":"Next","tagName":"h3"},{"title":"react​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#react","content":" $ npm install --save-dev @map-colonies/eslint-config eslint-plugin-react eslint-plugin-react-hooks   ","version":"Next","tagName":"h3"},{"title":"jest​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#jest","content":" $ npm install --save-dev @map-colonies/eslint-config eslint-plugin-jest   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#usage","content":" Add the configs you want to the eslint configuration file of your choice. In this example we are using the file eslint.config.mjsFor more information check the following link Configuration Files. Note: make sure to add ts-base last.  import tsBaseConfig from '@map-colonies/eslint-config/ts-base'; import { config } from '@map-colonies/eslint-config/helpers'; export default config(tsBaseConfig);   ","version":"Next","tagName":"h2"},{"title":"Debug​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#debug","content":" If you want to check the ESLint configuration, debug problems or just see the final configuration, you can the following command that will open the eslint configuration UI in your browser.  npx eslint --inspect-config .   For more information check the following link debug.  ","version":"Next","tagName":"h2"},{"title":"Adding new Configs​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#adding-new-configs","content":" Add a new file and name it as you would like. Inside export the ESLint configuration.  module.exports = { extends: ['plugin:jest/recommended', 'plugin:jest/style'], plugins: ['jest'], env: { 'jest/globals': true, }, };   after you finished developing the config, make sure it works by using the --print-config flag of ESLint, in the project you use for testing.  $ npx eslint --print-config index.ts   Don't forget adding the config to this readme 😊  ","version":"Next","tagName":"h2"},{"title":"Issues​","type":1,"pageTitle":"ESLint config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/eslint-config#issues","content":" If any linting error is appearing twice, or you have any other problem, please open an issue with all the details you have.  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/eslint-config/blob/master/README.md ","version":"Next","tagName":"h2"},{"title":"default","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/functions/default","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"default","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/functions/default#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"options?​","type":1,"pageTitle":"default","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/functions/default#options","content":" Options  Configuration options for the HTTP logger  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"default","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/functions/default#returns","content":" HttpLogger  Express middleware that logs HTTP requests and responses  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"default","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/functions/default#example","content":" app.use(httpLogger({ ignorePaths: ['/health', '/metrics'], // other pino-http options }));  ","version":"Next","tagName":"h2"},{"title":"Options","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#properties","content":" ","version":"Next","tagName":"h2"},{"title":"customErrorMessage()?​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#customerrormessage","content":" optional customErrorMessage: (req, res, error) =&gt; string  Defined in: index.ts:28  Custom function to generate error messages.  Parameters​  req​  IncomingMessage  res​  ServerResponse  error​  Error  Returns​  string    ","version":"Next","tagName":"h3"},{"title":"customErrorObject()?​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#customerrorobject","content":" optional customErrorObject: (req, res, error, val) =&gt; any  Defined in: index.ts:40  Custom function to modify the error log object.  Parameters​  req​  IncomingMessage  res​  ServerResponse  error​  Error  val​  any  Returns​  any    ","version":"Next","tagName":"h3"},{"title":"customLogLevel()?​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#customloglevel","content":" optional customLogLevel: (req, res, error?) =&gt; LevelWithSilent  Defined in: index.ts:24  Custom function to determine log level based on request, response and error.  Parameters​  req​  IncomingMessage  res​  ServerResponse  error?​  Error  Returns​  LevelWithSilent    ","version":"Next","tagName":"h3"},{"title":"customSuccessMessage()?​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#customsuccessmessage","content":" optional customSuccessMessage: (req, res, responseTime) =&gt; string  Defined in: index.ts:32  Custom function to generate success messages.  Parameters​  req​  IncomingMessage  res​  ServerResponse  responseTime​  number  Returns​  string    ","version":"Next","tagName":"h3"},{"title":"customSuccessObject()?​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#customsuccessobject","content":" optional customSuccessObject: (req, res, val) =&gt; any  Defined in: index.ts:36  Custom function to modify the success log object.  Parameters​  req​  IncomingMessage  res​  ServerResponse  val​  any  Returns​  any    ","version":"Next","tagName":"h3"},{"title":"ignore()?​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#ignore","content":" optional ignore: (req) =&gt; boolean  Defined in: index.ts:20  Custom ignore options for automatic logging.  Parameters​  req​  IncomingMessage  Returns​  boolean    ","version":"Next","tagName":"h3"},{"title":"ignorePaths?​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#ignorepaths","content":" optional ignorePaths: (string | RegExp)[]  Defined in: index.ts:16  Array of paths or regular expressions to ignore from logging.    ","version":"Next","tagName":"h3"},{"title":"logger​","type":1,"pageTitle":"Options","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware/typedoc/interfaces/Options#logger","content":" logger: Logger  Defined in: index.ts:12  A Logger instance used for logging requests and responses. ","version":"Next","tagName":"h3"},{"title":"express-access-log-middleware","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware","content":"","keywords":"","version":"Next"},{"title":"API documentation​","type":1,"pageTitle":"express-access-log-middleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware#api-documentation","content":" Check the autogenerated documentation here.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"express-access-log-middleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware#usage","content":" import * as express from 'express'; import jsLogger from '@map-colonies/js-logger'; import httpLogger from '@map-colonies/express-access-log-middleware'; const app = express() const logger = jsLogger(); app.use(httpLogger({logger})); app.get('/', (req,res) =&gt; { res.json({hello: 'world'}); }); app.listen(8080);   for more detailed usage check the pino-http documentation.  ","version":"Next","tagName":"h2"},{"title":"","type":1,"pageTitle":"express-access-log-middleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware##","content":" ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"express-access-log-middleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/express-access-log-middleware#configuration","content":" name\ttype\tdefault value\tdescriptionlogger\tLogger\trequired\tThe logger instance used for logging requests and responses ignorePaths\t(string | RegExp)[]\tundefined\tArray of paths or regular expressions to ignore from logging ignore\tAutoLoggingOptions['ignore']\tundefined\tCustom ignore options for automatic logging customLogLevel\t(req, res, err) =&gt; LogLevel\terror for &gt;=400, info otherwise\tCustom function to determine log level based on request, response and error customSuccessMessage\t(res: ServerResponse) =&gt; string\tundefined\tCustom function to generate success messages customSuccessObject\t(req: IncomingMessage, res: ServerResponse, val: any) =&gt; object\tundefined\tCustom function to modify the success log object customErrorMessage\t(error: Error, res: ServerResponse) =&gt; string\tundefined\tCustom function to generate error messages customErrorObject\t(req: IncomingMessage, res: ServerResponse, error: Error) =&gt; object\tundefined\tCustom function to modify the error log object  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/express-access-log-middleware/blob/master/README.md ","version":"Next","tagName":"h2"},{"title":"js logger","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger","content":"","keywords":"","version":"Next"},{"title":"API documentation​","type":1,"pageTitle":"js logger","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger#api-documentation","content":" Check the autogenerated documentation here.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"js logger","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger#usage","content":" import jsLogger from '@map-colonies/js-logger'; const logger = jsLogger(); logger.info('hello world'); logger.error({hello: 'world'});   ","version":"Next","tagName":"h2"},{"title":"Logging errors​","type":1,"pageTitle":"js logger","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger#logging-errors","content":" One of the features of the logger is the ability to parse error objects and format them accordingly. To allow the logger to identify the error, add it to the log object under the err key.  try { // complex code } catch (error) { logger.error({msg: &quot;oh noes&quot;, err: error}); }   For more detailed usage check the pino documentation.  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"js logger","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger#configuration","content":" name\ttype\tdefault value\tdescriptionenabled\tboolean\ttrue\tdetermines if logging is enabled level\tstring\t'info'\tspecifies the logging level redact\tarray\tundefined\tdefines paths to redact from log output hooks\tobject\tundefined\thooks for customizing log behavior base\tobject\t{pid: process.pid, hostname: os.hostname}\tbase properties to include in log output mixin\tfunction\tundefined\tfunction to add custom properties to log output prettyPrint\tboolean\tfalse\tenables pretty-printing of log output pinoCaller\tboolean\tfalse\tincludes the caller's file and line number in log output  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/js-logger/blob/master/README.md ","version":"Next","tagName":"h2"},{"title":"index","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc","content":"","keywords":"","version":"Next"},{"title":"Interfaces​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc#interfaces","content":" LoggerOptions  ","version":"Next","tagName":"h2"},{"title":"Type Aliases​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc#type-aliases","content":" Logger  ","version":"Next","tagName":"h2"},{"title":"Functions​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc#functions","content":" default ","version":"Next","tagName":"h2"},{"title":"LoggerOptions","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#properties","content":" ","version":"Next","tagName":"h2"},{"title":"base?​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#base","content":" optional base: null | {}  Defined in: index.ts:27  Base properties to include in log output.    ","version":"Next","tagName":"h3"},{"title":"enabled?​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#enabled","content":" optional enabled: boolean  Defined in: index.ts:11  Determines if logging is enabled.    ","version":"Next","tagName":"h3"},{"title":"hooks?​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#hooks","content":" optional hooks: object  Defined in: index.ts:23  Hooks for customizing log behavior.  logMethod()?​  optional logMethod: (this, args, method, level) =&gt; void  Allows for manipulating the parameters passed to logger methods. The signature for this hook is logMethod (args, method, level) {}, where args is an array of the arguments that were passed to the log method and method is the log method itself, and level is the log level. This hook must invoke the method function by using apply, like so: method.apply(this, newArgumentsArray).  Parameters​  this​  Logger&lt;never, boolean&gt;  args​  [string, ...args: any[]]  method​  LogFn  level​  number  Returns​  void  streamWrite()?​  optional streamWrite: (s) =&gt; string  Allows for manipulating the stringified JSON log output just before writing to various transports. This function must return a string and must be valid JSON.  Parameters​  s​  string  Returns​  string    ","version":"Next","tagName":"h3"},{"title":"level?​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#level-1","content":" optional level: LevelWithSilentOrString  Defined in: index.ts:15  Specifies the logging level.    ","version":"Next","tagName":"h3"},{"title":"mixin?​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#mixin","content":" optional mixin: MixinFn&lt;never&gt;  Defined in: index.ts:31  Function to add custom properties to log output.    ","version":"Next","tagName":"h3"},{"title":"pinoCaller?​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#pinocaller","content":" optional pinoCaller: boolean  Defined in: index.ts:39  Includes the caller's file and line number in log output.    ","version":"Next","tagName":"h3"},{"title":"prettyPrint?​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#prettyprint","content":" optional prettyPrint: boolean  Defined in: index.ts:35  Enables pretty-printing of log output.    ","version":"Next","tagName":"h3"},{"title":"redact?​","type":1,"pageTitle":"LoggerOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/interfaces/LoggerOptions#redact","content":" optional redact: string[] | redactOptions  Defined in: index.ts:19  Defines paths to redact from log output. ","version":"Next","tagName":"h3"},{"title":"default","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/functions/default","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"default","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/functions/default#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"options?​","type":1,"pageTitle":"default","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/functions/default#options","content":" LoggerOptions  Optional configuration for the logger.  ","version":"Next","tagName":"h3"},{"title":"destination?​","type":1,"pageTitle":"default","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/functions/default#destination","content":" The destination for the log output. Can be a file path or a file descriptor number. Default is 1.  string | number  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"default","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/functions/default#returns","content":" Logger  The configured logger instance. ","version":"Next","tagName":"h2"},{"title":"Logger","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/type-aliases/Logger","content":"","keywords":"","version":"Next"},{"title":"Type Parameters​","type":1,"pageTitle":"Logger","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/js-logger/typedoc/type-aliases/Logger#type-parameters","content":" • CustomLevels extends string = never  • UseOnlyCustomLevels extends boolean = boolean ","version":"Next","tagName":"h2"},{"title":"index","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc","content":"","keywords":"","version":"Next"},{"title":"Classes​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc#classes","content":" OpenapiViewerRouter  ","version":"Next","tagName":"h2"},{"title":"Interfaces​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc#interfaces","content":" OpenapiRouterConfig ","version":"Next","tagName":"h2"},{"title":"OpenapiViewerRouter","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/classes/OpenapiViewerRouter","content":"","keywords":"","version":"Next"},{"title":"Example​","type":1,"pageTitle":"OpenapiViewerRouter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/classes/OpenapiViewerRouter#example","content":" const config = { filePathOrSpec: './openapi.yml', uiPath: '/api-docs', rawPath: '/spec' }; const router = new OpenapiViewerRouter(config); router.setup(); app.use('/', router.getRouter());   ","version":"Next","tagName":"h2"},{"title":"Remarks​","type":1,"pageTitle":"OpenapiViewerRouter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/classes/OpenapiViewerRouter#remarks","content":" The router must be setup using the setup method before it can be used. The setup method can only be called once per instance.  ","version":"Next","tagName":"h2"},{"title":"OpenAPI Express Viewer","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"OpenAPI Express Viewer","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer#features","content":" Serve Swagger UI for interactive API documentationServe raw OpenAPI specification in JSON and YAML formatsSupport for both file-based and object-based specificationsTypeScript support out of the box  ","version":"Next","tagName":"h2"},{"title":"API documentation​","type":1,"pageTitle":"OpenAPI Express Viewer","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer#api-documentation","content":" Check the autogenerated documentation here.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"OpenAPI Express Viewer","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer#installation","content":" npm install @map-colonies/openapi-express-viewer   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"OpenAPI Express Viewer","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Example​","type":1,"pageTitle":"OpenAPI Express Viewer","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer#basic-example","content":" import express from 'express'; import { OpenapiViewerRouter } from '@map-colonies/openapi-express-viewer'; const app = express(); const config = { filePathOrSpec: './openapi.yml', // Path to your OpenAPI spec file uiPath: '/api-docs', // UI endpoint rawPath: '/spec' // Raw spec endpoint }; const openapiRouter = new OpenapiViewerRouter(config); openapiRouter.setup(); app.use('/', openapiRouter.getRouter()); app.listen(3000);   ","version":"Next","tagName":"h3"},{"title":"Using Object Specification​","type":1,"pageTitle":"OpenAPI Express Viewer","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer#using-object-specification","content":" import { OpenapiViewerRouter } from '@map-colonies/openapi-express-viewer'; const openapiSpec = { openapi: '3.0.0', info: { title: 'My API', version: '1.0.0' } // ... rest of your OpenAPI specification }; const config = { filePathOrSpec: openapiSpec, uiPath: '/api-docs' }; const openapiRouter = new OpenapiViewerRouter(config); // ... rest of setup   ","version":"Next","tagName":"h3"},{"title":"Configuration Options​","type":1,"pageTitle":"OpenAPI Express Viewer","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer#configuration-options","content":" Option\tType\tRequired\tDescriptionfilePathOrSpec\tstring | object\tYes\tPath to OpenAPI spec file or specification object uiPath\tstring\tYes\tEndpoint path for Swagger UI rawPath\tstring\tNo\tEndpoint path for raw specification files  ","version":"Next","tagName":"h2"},{"title":"Endpoints​","type":1,"pageTitle":"OpenAPI Express Viewer","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer#endpoints","content":" When configured with rawPath: '/spec', the following endpoints become available:  GET /spec.json - Raw OpenAPI spec in JSON formatGET /spec.yml - Raw OpenAPI spec in YAML formatGET /spec.yaml - Raw OpenAPI spec in YAML format (alternative extension)GET /api-docs - Swagger UI interface (based on uiPath configuration)  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/openapi-express-viewer/blob/master/README.md ","version":"Next","tagName":"h3"},{"title":"Constructors​","type":1,"pageTitle":"OpenapiViewerRouter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/classes/OpenapiViewerRouter#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new OpenapiViewerRouter()​","type":1,"pageTitle":"OpenapiViewerRouter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/classes/OpenapiViewerRouter#new-openapiviewerrouter","content":" new OpenapiViewerRouter(openapiRouterConfig): OpenapiViewerRouter  Defined in: OpenapiRouter.ts:41  Parameters​  openapiRouterConfig​  OpenapiRouterConfig  Returns​  OpenapiViewerRouter  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"OpenapiViewerRouter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/classes/OpenapiViewerRouter#methods","content":" ","version":"Next","tagName":"h2"},{"title":"getRouter()​","type":1,"pageTitle":"OpenapiViewerRouter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/classes/OpenapiViewerRouter#getrouter","content":" getRouter(): Router  Defined in: OpenapiRouter.ts:92  Retrieves the configured Express router instance.  Returns​  Router  The configured Express router  Throws​  When called before running setup    ","version":"Next","tagName":"h3"},{"title":"setup()​","type":1,"pageTitle":"OpenapiViewerRouter","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/classes/OpenapiViewerRouter#setup","content":" setup(): void  Defined in: OpenapiRouter.ts:58  Initializes the OpenAPI router with the specified configuration. Sets up routes for serving the OpenAPI specification in JSON and YAML formats, as well as configuring the Swagger UI endpoint.  Returns​  void  Throws​  If setup is called more than once on the same instance  The method performs the following:  Loads the OpenAPI specification from file if path is provided, or uses the provided spec objectCreates routes for serving the raw specification in different formats (.json, .yml, .yaml)Sets up the Swagger UI endpoint ","version":"Next","tagName":"h3"},{"title":"OpenapiRouterConfig","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/interfaces/OpenapiRouterConfig","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"OpenapiRouterConfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/interfaces/OpenapiRouterConfig#properties","content":" ","version":"Next","tagName":"h2"},{"title":"customUiCss?​","type":1,"pageTitle":"OpenapiRouterConfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/interfaces/OpenapiRouterConfig#customuicss","content":" optional customUiCss: string  Defined in: OpenapiRouter.ts:12    ","version":"Next","tagName":"h3"},{"title":"filePathOrSpec​","type":1,"pageTitle":"OpenapiRouterConfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/interfaces/OpenapiRouterConfig#filepathorspec","content":" filePathOrSpec: string | JsonObject  Defined in: OpenapiRouter.ts:9    ","version":"Next","tagName":"h3"},{"title":"rawPath?​","type":1,"pageTitle":"OpenapiRouterConfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/interfaces/OpenapiRouterConfig#rawpath","content":" optional rawPath: string  Defined in: OpenapiRouter.ts:10    ","version":"Next","tagName":"h3"},{"title":"uiPath​","type":1,"pageTitle":"OpenapiRouterConfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-express-viewer/typedoc/interfaces/OpenapiRouterConfig#uipath","content":" uiPath: string  Defined in: OpenapiRouter.ts:11 ","version":"Next","tagName":"h3"},{"title":"openapi-helpers","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#installation","content":" Run the following commands:  npm install --save-dev @map-colonies/openapi-helpers supertest prettier openapi-typescript @types/express   ","version":"Next","tagName":"h2"},{"title":"CLI Usage​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#cli-usage","content":" The package provides a unified CLI for generating TypeScript types and error classes from OpenAPI specifications. All code generation is now performed using the generate command, which supports subcommands for types and errors.  CLI Arguments Reference​  Positional Arguments:For both generate types and generate errors commands, the positional arguments are:  &lt;openapi-file&gt;: Path to the OpenAPI YAML or JSON file to use as the source schema.&lt;output-file&gt;: Path to the file where the generated code will be written.  These arguments are required and must be provided in the order shown.  Optional Arguments:  For generate types:  -f, --format: Format the generated types using Prettier-t, --add-typed-request-handler: Add the TypedRequestHandler type to the generated types  For generate errors:  -f, --format: Format the generated code using Prettier-e, --errors-output &lt;all|map|classes&gt;: Specify what to generate (default: all) all: generate both error classes and error code mappingmap: generate only the error code mappingclasses: generate only the error classes  ","version":"Next","tagName":"h2"},{"title":"Generate Types​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#generate-types","content":" Generate TypeScript types from an OpenAPI schema:  npx @map-colonies/openapi-helpers generate types &lt;openapi-file&gt; &lt;output-file&gt; [options]   For example:  npx @map-colonies/openapi-helpers generate types ./openapi3.yaml ./src/openapi.d.ts --format --add-typed-request-handler   Options:  -f, --format - Format the generated types using prettier.-t, --add-typed-request-handler - Add the TypedRequestHandler type to the generated types.  ","version":"Next","tagName":"h3"},{"title":"Generate Errors​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#generate-errors","content":" Generate error classes and error code mappings from an OpenAPI schema:  npx @map-colonies/openapi-helpers generate errors &lt;openapi-file&gt; &lt;output-file&gt; [options]   For example:  npx @map-colonies/openapi-helpers generate errors ./openapi3.yaml ./src/errors.ts --format   Options:  -f, --format - Format the generated code using prettier.-e, --errors-output &lt;all|map|classes&gt; - Specify what to generate: all (default): generate both error classes and error code mappingmap: generate only the error code mappingclasses: generate only the error classes  ","version":"Next","tagName":"h3"},{"title":"Help and Examples​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#help-and-examples","content":" To see all available commands and options:  npx @map-colonies/openapi-helpers --help npx @map-colonies/openapi-helpers generate --help npx @map-colonies/openapi-helpers generate types --help npx @map-colonies/openapi-helpers generate errors --help   Example: Run all generations​  You can run both types and errors generation in sequence:  npx @map-colonies/openapi-helpers generate types ./openapi3.yaml ./src/openapi.d.ts --format --add-typed-request-handler npx @map-colonies/openapi-helpers generate errors ./openapi3.yaml ./src/errors.ts --format --errors-output all   ","version":"Next","tagName":"h3"},{"title":"Programmatic Support​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#programmatic-support","content":" [!NOTE]Programmatic usage of the CLI (importing and using the generators directly) is only supported in ECMAScript modules (ESM). CommonJS is not supported for direct imports.  The code generators (generateTypes.mts and generateErrors.mts) now support functional programming patterns. You can inject custom transformation logic or AST manipulation by providing functional arguments, making the generators more flexible and composable for advanced use cases.  ","version":"Next","tagName":"h2"},{"title":"API Usage​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#api-usage","content":" You can import and use the generators directly in your own scripts for full functional programming flexibility:  import { generateTypes, generateErrors } from '@map-colonies/openapi-helpers/generators'; // Generate types await generateTypes( 'openapi3.yaml', 'src/openapi.d.ts', { shouldFormat: true, addTypedRequestHandler: true, // inject?: string, // transform?: (schemaObject, metadata) =&gt; ... } ); // Generate errors await generateErrors( 'openapi3.yaml', 'src/errors.ts', { shouldFormat: true, includeMapping: true, includeErrorClasses: true } );   You can pass custom inject or transform functions to generateTypes for advanced AST/code manipulation, enabling highly composable and functional workflows.  ","version":"Next","tagName":"h3"},{"title":"TypedRequestHandler​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#typedrequesthandler","content":" The package contains a wrapper for the express types package that provides autocomplete for all the request handlers to the API based on the OpenAPI schema. The TypedRequestHandler is initialized with the types generated by openapi-typescript, and is configured based on operation name or method and path.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#usage","content":" import { TypedRequestHandlers } from '@map-colonies/openapi-helpers/typedRequestHandler'; import type { paths, operations } from './src/openapi.d.ts'; // Initialize the TypedRequestHandlers with the paths and operations types // This can be done in a separate file and exported, in the same file or even in the same line type MyHandlers = TypedRequestHandlers&lt;paths, operations&gt;; export class Controller { // Define the handler for the operation based on method and path public getResource: MyHandlers['GET /resource'] = (req, res) =&gt; { res.status(httpStatus.OK).json({id: 1, description: 'description', name: 'name'}); }; // Define the handler for the operation based on the operation name public getResource: MyHandlers['getResource'] = (req, res) =&gt; { res.status(httpStatus.OK).json({id: 1, description: 'description', name: 'name'}); }; }   ","version":"Next","tagName":"h3"},{"title":"RequestSender​","type":1,"pageTitle":"openapi-helpers","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/openapi-helpers#requestsender","content":" The package contains a wrapper for the supertest package that provides autocomplete for all the requests to the API based on the OpenAPI schema. The RequestSender is initialized with the server's base URL and the OpenAPI schema and the types exported by openapi-typescript.  import { RequestSender } from '@map-colonies/openapi-helpers/requestSender'; import type { paths, operations } from './src/openapi.d.ts'; const requestSender = await createRequestSender&lt;paths, operations&gt;('path/to/openapi3.yaml', expressApp);   The requestSender object contains all the paths and operations defined in the OpenAPI schema. For example, to send a request to the getUsers operation with the /users path and with the GET method, you can use the following code:  const response = await requestSender.getUsers(); // or const response = await requestSender.sendRequest({ method: 'get', path: '/simple-request' });   The package supports all the operations defined in the OpenAPI schema, either by operation name, or by using the sendRequest function with the method, path and parameters.  [!IMPORTANT] For the package to function properly, you need to make sure that the following values are configured in your tsconfig.json or jsconfig.json files under compilerOptions: module: &quot;NodeNext&quot;moduleResolution: &quot;NodeNext&quot;  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/openapi-helpers/blob/master/README.md ","version":"Next","tagName":"h2"},{"title":"read-pkg","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"read-pkg","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg#installation","content":" npm install @mapcolonies/read-pkg   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"read-pkg","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg#usage","content":" import { readPackageJsonSync } from '@map-colonies/read-pkg'; // Read package.json from current directory const packageJson = readPackageJsonSync(); console.log(packageJson.name); // Read package.json from specific path const otherPackageJson = readPackageJsonSync('./path/to/package.json'); console.log(otherPackageJson.version);   ","version":"Next","tagName":"h2"},{"title":"API​","type":1,"pageTitle":"read-pkg","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg#api","content":" Check the autogenerated documentation here.  ","version":"Next","tagName":"h2"},{"title":"readPackageJsonSync(path?: string, encoding?: BufferEncoding): PackageJson​","type":1,"pageTitle":"read-pkg","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg#readpackagejsonsyncpath-string-encoding-bufferencoding-packagejson","content":" Synchronously reads and parses a package.json file.  Parameters​  path (optional): Path to the package.json file. Defaults to './package.json'encoding (optional): File encoding to use. Defaults to 'utf-8'  Returns​  Returns a PackageJson object from the type-fest package.  Throws​  SyntaxError: If the JSON content is invalidError: If the file cannot be read or does not exist  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/read-pkg/blob/master/README.md ","version":"Next","tagName":"h3"},{"title":"Prettier config","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/prettier-config","content":"","keywords":"","version":"Next"},{"title":"Description​","type":1,"pageTitle":"Prettier config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/prettier-config#description","content":" This configuration extends Prettier's default settings with MapColonies' preferred styling choices:  Single quotes2 spaces indentation150 characters line lengthES5 trailing commasLF line endingsSemicolons enforced  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Prettier config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/prettier-config#installation","content":" npm install --save-dev @mapcolonies/prettier-config   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Prettier config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/prettier-config#usage","content":" Add the configuration using one of these methods:  Add to your package.json:  { &quot;prettier&quot;: &quot;@map-colonies/prettier-config&quot; }   Create a .prettierrc JSON file:  &quot;@map-colonies/prettier-config&quot;   If you need to customize some options, create a .prettierrc.js file:  module.exports = { ...require(&quot;@map-colonies/prettier-config&quot;), // your overrides here };   ","version":"Next","tagName":"h2"},{"title":"Useful Links​","type":1,"pageTitle":"Prettier config","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/prettier-config#useful-links","content":" Prettier Official WebsitePrettier GitHub RepositoryPrettier Configuration OptionsPrettier Shared Configurations  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/prettier-config/blob/master/README.md ","version":"Next","tagName":"h2"},{"title":"index","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc","content":"","keywords":"","version":"Next"},{"title":"Functions​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc#functions","content":" readPackageJsonSync ","version":"Next","tagName":"h2"},{"title":"index","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc","content":"","keywords":"","version":"Next"},{"title":"Modules​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc#modules","content":" MainMetrics Middlewares ","version":"Next","tagName":"h2"},{"title":"readPackageJsonSync","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc/functions/readPackageJsonSync","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"readPackageJsonSync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc/functions/readPackageJsonSync#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"path​","type":1,"pageTitle":"readPackageJsonSync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc/functions/readPackageJsonSync#path","content":" string = './package.json'  The path to the package.json file. Defaults to './package.json'.  ","version":"Next","tagName":"h3"},{"title":"encoding​","type":1,"pageTitle":"readPackageJsonSync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc/functions/readPackageJsonSync#encoding","content":" BufferEncoding = 'utf-8'  The encoding to use when reading the file. Defaults to 'utf-8'.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"readPackageJsonSync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc/functions/readPackageJsonSync#returns","content":" PackageJson  The parsed package.json content as a PackageJson object.  ","version":"Next","tagName":"h2"},{"title":"Throws​","type":1,"pageTitle":"readPackageJsonSync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc/functions/readPackageJsonSync#throws","content":" If the JSON content is invalid.  ","version":"Next","tagName":"h2"},{"title":"Throws​","type":1,"pageTitle":"readPackageJsonSync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/read-pkg/typedoc/functions/readPackageJsonSync#throws-1","content":" If the file cannot be read or does not exist. ","version":"Next","tagName":"h2"},{"title":"index","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main","content":"","keywords":"","version":"Next"},{"title":"Metrics​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main#metrics","content":" MetricsMetricsOptions  ","version":"Next","tagName":"h2"},{"title":"Tracing​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main#tracing","content":" TracingTracingOptions  ","version":"Next","tagName":"h2"},{"title":"Tracing Decorators​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main#tracing-decorators","content":" withSpanwithSpanAsyncwithSpanAsyncV4withSpanV4  ","version":"Next","tagName":"h2"},{"title":"Tracing Utilities​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main#tracing-utilities","content":" asyncCallWithSpancallWithSpancontexBindingHelpergetOtelMixingetTraceContexHeaderMiddlewarehandleSpanOnErrorhandleSpanOnSuccessignoreIncomingRequestUrlignoreOutgoingRequestPathlogMethod ","version":"Next","tagName":"h2"},{"title":"asyncCallWithSpan","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/asyncCallWithSpan","content":"","keywords":"","version":"Next"},{"title":"Type Parameters​","type":1,"pageTitle":"asyncCallWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/asyncCallWithSpan#type-parameters","content":" • T  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"asyncCallWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/asyncCallWithSpan#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"fn​","type":1,"pageTitle":"asyncCallWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/asyncCallWithSpan#fn","content":" (span?) =&gt; Promise&lt;T&gt;  function to be called  ","version":"Next","tagName":"h3"},{"title":"tracer​","type":1,"pageTitle":"asyncCallWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/asyncCallWithSpan#tracer","content":" Tracer  tracer to be used  ","version":"Next","tagName":"h3"},{"title":"spanName​","type":1,"pageTitle":"asyncCallWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/asyncCallWithSpan#spanname","content":" string  name of the span to be created  ","version":"Next","tagName":"h3"},{"title":"spanOptions?​","type":1,"pageTitle":"asyncCallWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/asyncCallWithSpan#spanoptions","content":" SpanOptions  Options object needed for span creation with optional attributes: kind, attributes, links, startTime, root  ","version":"Next","tagName":"h3"},{"title":"Metrics","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Metrics","content":"","keywords":"","version":"Next"},{"title":"Implements​","type":1,"pageTitle":"Metrics","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Metrics#implements","content":" TelemetryBase&lt;void&gt;  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Metrics","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Metrics#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new Metrics()​","type":1,"pageTitle":"Metrics","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Metrics#new-metrics","content":" new Metrics(options): Metrics  Defined in: metrics/metrics.ts:37  Creates a new instance of the metrics class.  Parameters​  options​  MetricsOptions = {}  Configuration options for metrics  Returns​  Metrics  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Metrics","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Metrics#methods","content":" ","version":"Next","tagName":"h2"},{"title":"start()​","type":1,"pageTitle":"Metrics","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Metrics#start","content":" start(): void  Defined in: metrics/metrics.ts:46  Starts the metrics collection and exporting process.  Returns​  void  Implementation of​  TelemetryBase.start    ","version":"Next","tagName":"h3"},{"title":"stop()​","type":1,"pageTitle":"Metrics","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Metrics#stop","content":" stop(): Promise&lt;void&gt;  Defined in: metrics/metrics.ts:79  Stops the metrics collection and exporting process.  Returns​  Promise&lt;void&gt;  A promise that resolves when the metrics provider is successfully shutdown.  Implementation of​  TelemetryBase.stop ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"asyncCallWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/asyncCallWithSpan#returns","content":" Promise&lt;T&gt;  the result of the original function ","version":"Next","tagName":"h2"},{"title":"Tracing","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Tracing","content":"","keywords":"","version":"Next"},{"title":"Implements​","type":1,"pageTitle":"Tracing","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Tracing#implements","content":" TelemetryBase&lt;void&gt;  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Tracing","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Tracing#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new Tracing()​","type":1,"pageTitle":"Tracing","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Tracing#new-tracing","content":" new Tracing(options): Tracing  Defined in: tracing/tracing.ts:52  Creates a new instance of the Tracing class.  Parameters​  options​  The options to configure the tracing functionality.  attributes​  Attributes  Optional attributes to be added to the resource.  autoInstrumentationsConfigMap​  InstrumentationConfigMap  Optional map of auto-instrumentation configurations.  debug​  boolean  Optional flag to enable debug mode.  hostname​  string  The value of the hostname attribute to use, will override the hostname.  instrumentations​  Instrumentation[]  Optional array of instrumentations.  isEnabled​  boolean  Specifies whether tracing is enabled.  serviceName​  string  The name of the service to put as attribute. By default will be read from the package.json file.  serviceVersion​  string  The version of the service to put as attribute. By default will be read from the package.json file.  traceRatio​  number  The ratio of traces to sample.  url​  string  The URL to an HTTP OTLP endpoint to send the traces to.  Returns​  Tracing  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Tracing","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Tracing#methods","content":" ","version":"Next","tagName":"h2"},{"title":"start()​","type":1,"pageTitle":"Tracing","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Tracing#start","content":" start(): void  Defined in: tracing/tracing.ts:63  Starts the tracing functionality.  Returns​  void  Implementation of​  TelemetryBase.start    ","version":"Next","tagName":"h3"},{"title":"stop()​","type":1,"pageTitle":"Tracing","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/classes/Tracing#stop","content":" stop(): Promise&lt;void&gt;  Defined in: tracing/tracing.ts:108  Stops the tracing functionality.  Returns​  Promise&lt;void&gt;  A promise that resolves when the tracing is stopped.  Implementation of​  TelemetryBase.stop ","version":"Next","tagName":"h3"},{"title":"Telemetry","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry","content":"","keywords":"","version":"Next"},{"title":"Motive​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#motive","content":" This package goal is to make the experience of configuring and working with OpenTelemetry easier.  ","version":"Next","tagName":"h2"},{"title":"Manual for easy local grafana deployment​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#manual-for-easy-local-grafana-deployment","content":" ","version":"Next","tagName":"h2"},{"title":"API documentation​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#api-documentation","content":" Check the autogenerated documentation here.  ","version":"Next","tagName":"h2"},{"title":"example​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#example","content":" Below are short examples for tracing and metrics. More examples are available at the examples folder, and the various opentelemetry repos.  ","version":"Next","tagName":"h2"},{"title":"Tracing​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#tracing","content":" The following code shows a simple example of how to work with tracing. please notice that you need to manually install any auto-instrumentation library that you require.  import { Tracing } from '@map-colonies/telemetry'; import { trace } from '@opentelemetry/api'; const tracing = new Tracing(); tracing.start(); const tracer = trace.getTracer('tracing-name') const span = tracer.startSpan('some-action'); span.setAttribute('some-attribute'); // DO STUFF span.end(); tracing.stop().then(() =&gt; console.log('done'));   Another way to initialize tracing with custom resource:  import { Tracing } from '@map-colonies/telemetry'; import { Resource } from '@opentelemetry/resources'; const resource = new Resource({ 'service.version': number, 'service.name': 'my-service-name' }); const tracing = new Tracing([], resource); ...   ","version":"Next","tagName":"h3"},{"title":"Metrics​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#metrics","content":" The following code shows a simple example of how to work with metrics.  import { Metrics } from '@map-colonies/telemetry'; const metrics = new Metrics('sample-meter'); const meter = metrics.start(); const counter = meter.createCounter('sample_counter'); counter.add(1); metrics.stop().then(() =&gt; console.log('done'));   ","version":"Next","tagName":"h3"},{"title":"Metrics middleware​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#metrics-middleware","content":" The package provides a middleware for Express that will automatically measure the duration of each request and the number of requests. In addition, the middleware can be configured to collect NodeJS metrics.  import { collectMetricsExpressMiddleware } from '@map-colonies/telemetry/prom-metrics'; import express from 'express'; import { Registry } from 'prom-client'; const prom = collectMetricsExpressMiddleware({ registry: new Registry(), labels: { meow: 'a' } }); app.use('/metrics', prom); app.get('/', (req, res) =&gt; { res.json({ x: 'd' }); }); app.listen(8080, () =&gt; console.log('server listening on 8080'));   [!NOTE] If you are not running the express-openapi-validator middleware, its recommended to turn off the includeOperationId option in the collectMetricsExpressMiddleware function as the operation label will always be null.  ","version":"Next","tagName":"h2"},{"title":"Semantic Conventions​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#semantic-conventions","content":" The package's Semantic Conventions submodule defines a common set of (semantic) attributes which provide meaning to data when collecting, producing and consuming it.​  Based on the official OpenTelemetry conventions  Link to full documentation  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#configuration","content":" ","version":"Next","tagName":"h2"},{"title":"Common configuration​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#common-configuration","content":" name\tallowed value\tdefault value\tdescriptionTELEMETRY_SERVICE_NAME\tstring\tpackage.json name\tThe name of the service to put as attribute TELEMETRY_SERVICE_VERSION\tstring\tpackage.json version\tThe version of the service to put as attribute TELEMETRY_HOST_NAME\tstring\tos.hostname()\tThe value of the hostname attribute to use, will override the hostname    ","version":"Next","tagName":"h3"},{"title":"Tracing configuration​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#tracing-configuration","content":" name\tallowed value\tdefault value\tdescriptionTELEMETRY_TRACING_ENABLED\t'true', 'false'\t'false'\tShould Tracing be enabled TELEMETRY_TRACING_URL*\tstring\thttp://localhost:4318/v1/traces\tThe URL to the OpenTelemetry Collector TELEMETRY_TRACING_RATIO\tfloat\t1\tThe amount of traces to sample (0-1) TELEMETRY_TRACING_DEBUG\t'true', 'false'\t'false'\tEnable debug mode for tracing which enables opentelemetry debug log and console trace export  * required (only when tracing is enabled).   ","version":"Next","tagName":"h3"},{"title":"Metric configuration​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#metric-configuration","content":" name\tallowed value\tdefault value\tdescriptionTELEMETRY_METRICS_ENABLED\t'true', 'false'\t'false'\tShould Metrics be enabled TELEMETRY_METRICS_URL*\tstring\thttp://localhost:4318/v1/metrics\tThe URL to the OpenTelemetry Collector TELEMETRY_METRICS_INTERVAL\tnumber\t15000\tThe interval in milliseconds between sending data to the collector  * required (only when metrics is enabled).  ","version":"Next","tagName":"h3"},{"title":"How to release​","type":1,"pageTitle":"Telemetry","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry#how-to-release","content":" Run the command npm run release -- to bump the version in all the files and create a changelog.  For more detailed documentation and examples check: https://github.com/conventional-changelog/standard-version  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/telemetry/blob/master/README.md ","version":"Next","tagName":"h3"},{"title":"getOtelMixin","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/getOtelMixin","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"getOtelMixin","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/getOtelMixin#returns","content":" Function  A function that takes in a mergeObject and level, and returns an object with trace information.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"getOtelMixin","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/getOtelMixin#parameters","content":" mergeObject​  object  level​  number  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"getOtelMixin","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/getOtelMixin#returns-1","content":" object ","version":"Next","tagName":"h3"},{"title":"callWithSpan","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/callWithSpan","content":"","keywords":"","version":"Next"},{"title":"Type Parameters​","type":1,"pageTitle":"callWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/callWithSpan#type-parameters","content":" • T  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"callWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/callWithSpan#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"fn​","type":1,"pageTitle":"callWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/callWithSpan#fn","content":" (span?) =&gt; T  function to be called  ","version":"Next","tagName":"h3"},{"title":"tracer​","type":1,"pageTitle":"callWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/callWithSpan#tracer","content":" Tracer  tracer to be used  ","version":"Next","tagName":"h3"},{"title":"spanName​","type":1,"pageTitle":"callWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/callWithSpan#spanname","content":" string  name of the span to be created  ","version":"Next","tagName":"h3"},{"title":"spanOptions?​","type":1,"pageTitle":"callWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/callWithSpan#spanoptions","content":" SpanOptions  Options object needed for span creation with optional attributes: kind, attributes, links, startTime, root  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"callWithSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/callWithSpan#returns","content":" T  the result of the original function ","version":"Next","tagName":"h2"},{"title":"contexBindingHelper","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/contexBindingHelper","content":"","keywords":"","version":"Next"},{"title":"Type Parameters​","type":1,"pageTitle":"contexBindingHelper","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/contexBindingHelper#type-parameters","content":" • T  The type of the function being bound.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"contexBindingHelper","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/contexBindingHelper#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"parentSpan​","type":1,"pageTitle":"contexBindingHelper","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/contexBindingHelper#parentspan","content":" Span  The parent span to bind.  ","version":"Next","tagName":"h3"},{"title":"func​","type":1,"pageTitle":"contexBindingHelper","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/contexBindingHelper#func","content":" T  The function to bind.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"contexBindingHelper","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/contexBindingHelper#returns","content":" T  The bound function. ","version":"Next","tagName":"h2"},{"title":"handleSpanOnSuccess","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnSuccess","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"handleSpanOnSuccess","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnSuccess#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"span​","type":1,"pageTitle":"handleSpanOnSuccess","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnSuccess#span","content":" span to be ended  undefined | Span  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"handleSpanOnSuccess","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnSuccess#returns","content":" void ","version":"Next","tagName":"h2"},{"title":"handleSpanOnError","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnError","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"handleSpanOnError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnError#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"span​","type":1,"pageTitle":"handleSpanOnError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnError#span","content":" span to be ended  undefined | Span  ","version":"Next","tagName":"h3"},{"title":"error?​","type":1,"pageTitle":"handleSpanOnError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnError#error","content":" unknown  error to be recorded  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"handleSpanOnError","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/handleSpanOnError#returns","content":" void ","version":"Next","tagName":"h2"},{"title":"getTraceContexHeaderMiddleware","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/getTraceContexHeaderMiddleware","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"getTraceContexHeaderMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/getTraceContexHeaderMiddleware#returns","content":" Handler  The middleware handler. ","version":"Next","tagName":"h2"},{"title":"ignoreOutgoingRequestPath","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreOutgoingRequestPath","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"ignoreOutgoingRequestPath","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreOutgoingRequestPath#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"pathsToIgnore​","type":1,"pageTitle":"ignoreOutgoingRequestPath","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreOutgoingRequestPath#pathstoignore","content":" RegExp[]  An array of regular expressions representing the paths to ignore.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"ignoreOutgoingRequestPath","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreOutgoingRequestPath#returns","content":" Function  A function that takes a request and returns a boolean indicating whether the request path should be ignored.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"ignoreOutgoingRequestPath","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreOutgoingRequestPath#parameters-1","content":" request​  RequestOptions  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"ignoreOutgoingRequestPath","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreOutgoingRequestPath#returns-1","content":" boolean ","version":"Next","tagName":"h3"},{"title":"ignoreIncomingRequestUrl","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreIncomingRequestUrl","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"ignoreIncomingRequestUrl","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreIncomingRequestUrl#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"urlsToIgnore​","type":1,"pageTitle":"ignoreIncomingRequestUrl","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreIncomingRequestUrl#urlstoignore","content":" RegExp[]  An array of regular expressions to match against the request URL.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"ignoreIncomingRequestUrl","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreIncomingRequestUrl#returns","content":" Function  A function that takes an incoming request and returns a boolean indicating whether the request URL should be ignored.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"ignoreIncomingRequestUrl","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreIncomingRequestUrl#parameters-1","content":" request​  IncomingMessage  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"ignoreIncomingRequestUrl","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/ignoreIncomingRequestUrl#returns-1","content":" boolean ","version":"Next","tagName":"h3"},{"title":"logMethod","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/logMethod","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"logMethod","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/logMethod#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"this​","type":1,"pageTitle":"logMethod","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/logMethod#this","content":" Logger&lt;LoggerOptions&gt;  ","version":"Next","tagName":"h3"},{"title":"args​","type":1,"pageTitle":"logMethod","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/logMethod#args","content":" LogFnArgs  ","version":"Next","tagName":"h3"},{"title":"method​","type":1,"pageTitle":"logMethod","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/logMethod#method","content":" LogFn  ","version":"Next","tagName":"h3"},{"title":"level​","type":1,"pageTitle":"logMethod","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/logMethod#level","content":" number  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"logMethod","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/logMethod#returns","content":" void  ","version":"Next","tagName":"h2"},{"title":"Deprecated​","type":1,"pageTitle":"logMethod","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/logMethod#deprecated","content":" use mixin instead ","version":"Next","tagName":"h2"},{"title":"withSpan","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpan","content":"","keywords":"","version":"Next"},{"title":"Type Parameters​","type":1,"pageTitle":"withSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpan#type-parameters","content":" • This extends object  • Args extends unknown[]  • Return  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"withSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpan#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"target​","type":1,"pageTitle":"withSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpan#target","content":" (this, ...args) =&gt; Return  the method to decorate  ","version":"Next","tagName":"h3"},{"title":"context​","type":1,"pageTitle":"withSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpan#context","content":" ClassMethodDecoratorContext&lt;This, (this, ...args) =&gt; Return&gt;  the class method decorator context  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"withSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpan#returns","content":" Function  the decorated method  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"withSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpan#parameters-1","content":" this​  This  args​  ...Args  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"withSpan","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpan#returns-1","content":" Return ","version":"Next","tagName":"h3"},{"title":"withSpanAsync","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsync","content":"","keywords":"","version":"Next"},{"title":"Type Parameters​","type":1,"pageTitle":"withSpanAsync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsync#type-parameters","content":" • This extends object  • Args extends unknown[]  • Return  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"withSpanAsync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsync#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"target​","type":1,"pageTitle":"withSpanAsync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsync#target","content":" (this, ...args) =&gt; Promise&lt;Return&gt;  the async method to decorate  ","version":"Next","tagName":"h3"},{"title":"context​","type":1,"pageTitle":"withSpanAsync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsync#context","content":" ClassMethodDecoratorContext&lt;This, (this, ...args) =&gt; Promise&lt;Return&gt;&gt;  the class method decorator context  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"withSpanAsync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsync#returns","content":" Function  the decorated async method  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"withSpanAsync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsync#parameters-1","content":" this​  This  args​  ...Args  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"withSpanAsync","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsync#returns-1","content":" Promise&lt;Return&gt; ","version":"Next","tagName":"h3"},{"title":"withSpanV4","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanV4","content":"","keywords":"","version":"Next"},{"title":"Type Parameters​","type":1,"pageTitle":"withSpanV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanV4#type-parameters","content":" • This extends object  • Args extends unknown[]  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"withSpanV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanV4#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"_target​","type":1,"pageTitle":"withSpanV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanV4#_target","content":" This  the class prototype  ","version":"Next","tagName":"h3"},{"title":"propertyKey​","type":1,"pageTitle":"withSpanV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanV4#propertykey","content":" the name of the decorated method  string | symbol  ","version":"Next","tagName":"h3"},{"title":"descriptor​","type":1,"pageTitle":"withSpanV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanV4#descriptor","content":" TypedPropertyDescriptor&lt;(this, ...args) =&gt; any&gt;  the method descriptor  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"withSpanV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanV4#returns","content":" TypedPropertyDescriptor&lt;(this, ...args) =&gt; any&gt;  the decorated descriptor ","version":"Next","tagName":"h2"},{"title":"withSpanAsyncV4","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsyncV4","content":"","keywords":"","version":"Next"},{"title":"Type Parameters​","type":1,"pageTitle":"withSpanAsyncV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsyncV4#type-parameters","content":" • This extends object  • Args extends unknown[]  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"withSpanAsyncV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsyncV4#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"_target​","type":1,"pageTitle":"withSpanAsyncV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsyncV4#_target","content":" This  the class prototype  ","version":"Next","tagName":"h3"},{"title":"propertyKey​","type":1,"pageTitle":"withSpanAsyncV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsyncV4#propertykey","content":" the name of the decorated async method  string | symbol  ","version":"Next","tagName":"h3"},{"title":"descriptor​","type":1,"pageTitle":"withSpanAsyncV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsyncV4#descriptor","content":" TypedPropertyDescriptor&lt;(this, ...args) =&gt; Promise&lt;any&gt;&gt;  the async method descriptor  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"withSpanAsyncV4","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/functions/withSpanAsyncV4#returns","content":" TypedPropertyDescriptor&lt;(this, ...args) =&gt; Promise&lt;any&gt;&gt;  the decorated descriptor ","version":"Next","tagName":"h2"},{"title":"MetricsOptions","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#extends","content":" Partial&lt;MetricsConfig&gt;  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#properties","content":" ","version":"Next","tagName":"h2"},{"title":"attributes?​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#attributes","content":" optional attributes: Attributes  Defined in: metrics/metrics.ts:21  Optional attributes to be associated with the metrics.    ","version":"Next","tagName":"h3"},{"title":"debug?​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#debug","content":" optional debug: boolean  Defined in: metrics/config.ts:27  Specifies whether to enable debug mode for metrics. Debug mode will enable the opentelemetry debug log and log metrics to the console.  Inherited from​  Partial.debug    ","version":"Next","tagName":"h3"},{"title":"hostname?​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#hostname","content":" optional hostname: string  Defined in: common/config.ts:19  The value of the hostname attribute to use, will override the hostname.  Inherited from​  Partial.hostname    ","version":"Next","tagName":"h3"},{"title":"isEnabled?​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#isenabled","content":" optional isEnabled: boolean  Defined in: metrics/config.ts:14  Specifies whether metrics is enabled.  Inherited from​  Partial.isEnabled    ","version":"Next","tagName":"h3"},{"title":"sendInterval?​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#sendinterval","content":" optional sendInterval: number  Defined in: metrics/config.ts:22  The interval in milliseconds to send the metrics.  Inherited from​  Partial.sendInterval    ","version":"Next","tagName":"h3"},{"title":"serviceName?​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#servicename","content":" optional serviceName: string  Defined in: common/config.ts:15  The name of the service to put as attribute. By default will be read from the package.json file.  Inherited from​  Partial.serviceName    ","version":"Next","tagName":"h3"},{"title":"serviceVersion?​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#serviceversion","content":" optional serviceVersion: string  Defined in: common/config.ts:24  The version of the service to put as attribute. By default will be read from the package.json file.  Inherited from​  Partial.serviceVersion    ","version":"Next","tagName":"h3"},{"title":"url?​","type":1,"pageTitle":"MetricsOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/MetricsOptions#url","content":" optional url: string  Defined in: metrics/config.ts:18  The URL to an HTTP OTLP endpoint to send the metrics to.  Inherited from​  Partial.url ","version":"Next","tagName":"h3"},{"title":"index","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares","content":"","keywords":"","version":"Next"},{"title":"Interfaces​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares#interfaces","content":" Opts  ","version":"Next","tagName":"h2"},{"title":"Functions​","type":1,"pageTitle":"index","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares#functions","content":" collectMetricsExpressMiddlewaredefaultMetricsMiddlewaremetricsMiddleware ","version":"Next","tagName":"h2"},{"title":"defaultMetricsMiddleware","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/defaultMetricsMiddleware","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"defaultMetricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/defaultMetricsMiddleware#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"prefix?​","type":1,"pageTitle":"defaultMetricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/defaultMetricsMiddleware#prefix","content":" string  ","version":"Next","tagName":"h3"},{"title":"labels?​","type":1,"pageTitle":"defaultMetricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/defaultMetricsMiddleware#labels","content":" Record&lt;string, string&gt;  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"defaultMetricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/defaultMetricsMiddleware#returns","content":" express.RequestHandler  ","version":"Next","tagName":"h2"},{"title":"Deprecated​","type":1,"pageTitle":"defaultMetricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/defaultMetricsMiddleware#deprecated","content":" since version v5.1, please use collectMetricsExpressMiddleware ","version":"Next","tagName":"h2"},{"title":"collectMetricsExpressMiddleware","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/collectMetricsExpressMiddleware","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"collectMetricsExpressMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/collectMetricsExpressMiddleware#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"options​","type":1,"pageTitle":"collectMetricsExpressMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/collectMetricsExpressMiddleware#options","content":" Partial&lt;Opts&gt;  Optional configuration options for the middleware.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"collectMetricsExpressMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/collectMetricsExpressMiddleware#returns","content":" promBundle.Middleware  The Express middleware function that collects metrics. ","version":"Next","tagName":"h2"},{"title":"metricsMiddleware","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/metricsMiddleware","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"metricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/metricsMiddleware#parameters","content":" ","version":"Next","tagName":"h2"},{"title":"registry​","type":1,"pageTitle":"metricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/metricsMiddleware#registry","content":" Registry  The metrics registry.  ","version":"Next","tagName":"h3"},{"title":"shouldCollectDefaultMetrics​","type":1,"pageTitle":"metricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/metricsMiddleware#shouldcollectdefaultmetrics","content":" boolean = true  Indicates whether to collect default metrics. Default is true.  ","version":"Next","tagName":"h3"},{"title":"defaultMetricsPrefix?​","type":1,"pageTitle":"metricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/metricsMiddleware#defaultmetricsprefix","content":" string  The prefix to be added to default metrics.  ","version":"Next","tagName":"h3"},{"title":"defaultMetricsLabels?​","type":1,"pageTitle":"metricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/metricsMiddleware#defaultmetricslabels","content":" Record&lt;string, string&gt;  The labels to be added to default metrics.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"metricsMiddleware","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/functions/metricsMiddleware#returns","content":" express.RequestHandler  The Express request handler function. ","version":"Next","tagName":"h2"},{"title":"Opts","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#properties","content":" ","version":"Next","tagName":"h2"},{"title":"collectNodeMetrics​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#collectnodemetrics","content":" collectNodeMetrics: boolean  Defined in: metrics/middleware/metrics.ts:24  Whether to collect node metrics.    ","version":"Next","tagName":"h3"},{"title":"collectServiceVersion​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#collectserviceversion","content":" collectServiceVersion: boolean  Defined in: metrics/middleware/metrics.ts:28  Whether to collect service version metrics.    ","version":"Next","tagName":"h3"},{"title":"customLabels​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#customlabels","content":" customLabels: object  Defined in: metrics/middleware/metrics.ts:47  Object containing extra labels, useful together with transformLabels.  Index Signature​  [key: string]: any    ","version":"Next","tagName":"h3"},{"title":"includeOperationId​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#includeoperationid","content":" includeOperationId: boolean  Defined in: metrics/middleware/metrics.ts:39  Add operation id based on the Openapi operationId to the metrics. Requires the express-openapi-validator package to function.  Default​  true     ","version":"Next","tagName":"h3"},{"title":"labels​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#labels","content":" labels: Record&lt;string, string&gt;  Defined in: metrics/middleware/metrics.ts:43  The labels to attach to all the metrics.    ","version":"Next","tagName":"h3"},{"title":"prefix​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#prefix","content":" prefix: string  Defined in: metrics/middleware/metrics.ts:33  The prefix for the metrics. e.g. 'my_prefix_my_metric'    ","version":"Next","tagName":"h3"},{"title":"registry​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#registry","content":" registry: Registry  Defined in: metrics/middleware/metrics.ts:20  The Prometheus registry to use for the metrics.    ","version":"Next","tagName":"h3"},{"title":"transformLabels?​","type":1,"pageTitle":"Opts","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Metrics Middlewares/interfaces/Opts#transformlabels","content":" optional transformLabels: TransformLabelsFn  Defined in: metrics/middleware/metrics.ts:51  Function to transform labels with request and response objects. ","version":"Next","tagName":"h3"},{"title":"TracingOptions","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#extends","content":" Partial&lt;TracingConfig&gt;  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#properties","content":" ","version":"Next","tagName":"h2"},{"title":"attributes?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#attributes","content":" optional attributes: Attributes  Defined in: tracing/tracing.ts:30  Optional attributes to be added to the resource.    ","version":"Next","tagName":"h3"},{"title":"autoInstrumentationsConfigMap?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#autoinstrumentationsconfigmap","content":" optional autoInstrumentationsConfigMap: InstrumentationConfigMap  Defined in: tracing/tracing.ts:26  Optional map of auto-instrumentation configurations.    ","version":"Next","tagName":"h3"},{"title":"debug?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#debug","content":" optional debug: boolean  Defined in: tracing/tracing.ts:34  Optional flag to enable debug mode.  Overrides​  Partial.debug    ","version":"Next","tagName":"h3"},{"title":"hostname?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#hostname","content":" optional hostname: string  Defined in: common/config.ts:19  The value of the hostname attribute to use, will override the hostname.  Inherited from​  Partial.hostname    ","version":"Next","tagName":"h3"},{"title":"instrumentations?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#instrumentations","content":" optional instrumentations: Instrumentation[]  Defined in: tracing/tracing.ts:22  Optional array of instrumentations.    ","version":"Next","tagName":"h3"},{"title":"isEnabled?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#isenabled","content":" optional isEnabled: boolean  Defined in: tracing/config.ts:13  Specifies whether tracing is enabled.  Inherited from​  Partial.isEnabled    ","version":"Next","tagName":"h3"},{"title":"serviceName?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#servicename","content":" optional serviceName: string  Defined in: common/config.ts:15  The name of the service to put as attribute. By default will be read from the package.json file.  Inherited from​  Partial.serviceName    ","version":"Next","tagName":"h3"},{"title":"serviceVersion?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#serviceversion","content":" optional serviceVersion: string  Defined in: common/config.ts:24  The version of the service to put as attribute. By default will be read from the package.json file.  Inherited from​  Partial.serviceVersion    ","version":"Next","tagName":"h3"},{"title":"traceRatio?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#traceratio","content":" optional traceRatio: number  Defined in: tracing/config.ts:21  The ratio of traces to sample.  Inherited from​  Partial.traceRatio    ","version":"Next","tagName":"h3"},{"title":"url?​","type":1,"pageTitle":"TracingOptions","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/telemetry/typedoc/Main/interfaces/TracingOptions#url","content":" optional url: string  Defined in: tracing/config.ts:17  The URL to an HTTP OTLP endpoint to send the traces to.  Inherited from​  Partial.url ","version":"Next","tagName":"h3"},{"title":"tsconfig","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/tsconfig","content":"","keywords":"","version":"Next"},{"title":"Install​","type":1,"pageTitle":"tsconfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/tsconfig#install","content":" npm install --save-dev @map-colonies/tsconfig   The config requires TypeScript 5.5 or later.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"tsconfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/tsconfig#usage","content":" tsconfig.json  { &quot;extends&quot;: &quot;@map-colonies/tsconfig/&lt;wanted tsconfig file&gt;&quot; }   ","version":"Next","tagName":"h2"},{"title":"Available files​","type":1,"pageTitle":"tsconfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/tsconfig#available-files","content":" tsconfig-app.json - For use in services like ts-server-boilerplatetsconfig-library.json - For use in libraries published to npmtsconfig-base.json - The base tsconfig file  ","version":"Next","tagName":"h2"},{"title":"Resources​","type":1,"pageTitle":"tsconfig","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/packages/tsconfig#resources","content":" TypeScript TSConfig ReferenceWhat is a tsconfig.json  note This page was generated from a remote source. you can find it on https://github.com/MapColonies/tsconfig/blob/master/README.md ","version":"Next","tagName":"h2"},{"title":"TypeScript Server Boilerplate","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate","content":"","keywords":"","version":"Next"},{"title":"Where do I find it?​","type":1,"pageTitle":"TypeScript Server Boilerplate","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate#where-do-i-find-it","content":" The boilerplate is available in the MapColonies™ GitHub repository  ","version":"Next","tagName":"h2"},{"title":"How do i create a new project using the boilerplate?​","type":1,"pageTitle":"TypeScript Server Boilerplate","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate#how-do-i-create-a-new-project-using-the-boilerplate","content":" When creating a new project, you can use the boilerplate as a template repository in GitHub.    Check the Getting Started guide for more information.  ","version":"Next","tagName":"h2"},{"title":"Important scripts​","type":1,"pageTitle":"TypeScript Server Boilerplate","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate#important-scripts","content":" npm run start:dev - Start the server in development mode.npm run start - Start the server in production mode.npm run test - Run the tests.npm run test:unit - Run the unit tests.npm run test:integration - Run the integration tests.npm run lint - Lint the code.npm run format:fix - Format the code.npm run build - Build the project.generate:openapi-types - Generate types from the OpenAPI schema.  ","version":"Next","tagName":"h2"},{"title":"Deep dive​","type":1,"pageTitle":"TypeScript Server Boilerplate","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate#deep-dive","content":" We can break down the boilerplate into the following sections:  CodeTestsThe repository configuration and validationDeployment  ","version":"Next","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"TypeScript Server Boilerplate","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate#code","content":" The code is written in TypeScript and uses the Express.js framework. The code is organized in a modular way, with each resource having its own directory and files. The boilerplate provides a basic structure for the code, with packages that provide features that give a good starting point for a new project.  For more information on the code structure and the packages used, check the following link.  ","version":"Next","tagName":"h3"},{"title":"Tests​","type":1,"pageTitle":"TypeScript Server Boilerplate","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate#tests","content":" The boilerplate includes tests for the code, using the Jest testing framework. The tests are organized in a similar way to the code, with each resource having its own test file. The tests are split into unit tests and integration tests, and provide a good starting point for writing tests for a new project.  For more information on the tests and the packages used, check the following link.  ","version":"Next","tagName":"h3"},{"title":"The repository configuration and validation​","type":1,"pageTitle":"TypeScript Server Boilerplate","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate#the-repository-configuration-and-validation","content":" In order for all the features to work correctly, there are a multitude of packages and configurations that are already set up in the boilerplate. They handle stuff like linting, formatting, testing, and more. Without all those files, maintaining standard and quality code would be a nightmare.  For more information on the repository configuration and validation, check the following link.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"TypeScript Server Boilerplate","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate#deployment","content":" What's the point of having a project if nobody can use it? The boilerplate includes a Dockerfile and a helm chart that can be used to deploy the project to a Kubernetes cluster. ","version":"Next","tagName":"h3"},{"title":"What We Did","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did","content":"What We Did","keywords":"","version":"Next"},{"title":"Code","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code","content":"","keywords":"","version":"Next"},{"title":"index​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#index","content":" The entry point of the application is the src/index.ts file. This file is responsible for starting the server and initializing the application. It imports the necessary modules and starts the server on the specified port.  The file also handles the error handling of critical errors (e.g. not errors that are part of a request).  ","version":"Next","tagName":"h2"},{"title":"Healthcheck​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#healthcheck","content":" The application healthcheck are configured in the src/healthcheck.ts file. This file is responsible for checking the health of the application and returning a response to the client. The healthcheck is configured to return a 200 OK response if the application is healthy, otherwise the application is unhealthy.  You should customize the healthcheck to match your application needs. The default implementation is just a stub.  The healthchecks are implemented using the @godaddy/terminus package.  ","version":"Next","tagName":"h3"},{"title":"Server Builder​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#server-builder","content":" The src/serverBuilder.ts file is responsible for creating the Express.js server and configuring it with the necessary middleware and routes.  ","version":"Next","tagName":"h2"},{"title":"Openapi viewer​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#openapi-viewer","content":" The OpenAPI viewer is configured and enables to view the OpenAPI documentation in the browser. By default, the OpenAPI viewer is configured to serve the OpenAPI documentation at the /docs/api endpoint. You can customize the endpoint by changing the configuration.  For more information on how to use the OpenAPI viewer, check the openapi-express-viewer documentation.  ","version":"Next","tagName":"h3"},{"title":"Routers​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#routers","content":" The routers are configured in the src/serverBuilder.ts file. The routers are responsible for handling the requests and returning the responses. The routers are organized by resource, with each resource having its own router.  When adding a new resource, you should create a new router and add it to the src/serverBuilder.ts file. The router should be imported from the resource directory.  ","version":"Next","tagName":"h3"},{"title":"Metrics middleware​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#metrics-middleware","content":" The metrics middleware exposes NodeJS, express and custom metrics to Prometheus. The metrics are exposed at the /metrics endpoint.  For more information check the MapColonies Telemetry package.  ","version":"Next","tagName":"h3"},{"title":"HTTP logger​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#http-logger","content":" The HTTP logger middleware is responsible for logging the requests and responses. The logger is configured to use the application logger to log those requests.  For more information check the express-access-log-middleware package.  ","version":"Next","tagName":"h3"},{"title":"OpenAPI validator​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#openapi-validator","content":" The boilerplate validates all the requests using the express-openapi-validator package. The package uses the OpenAPI schema to validate the requests.  ","version":"Next","tagName":"h3"},{"title":"Error handler​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#error-handler","content":" The error handler is responsible for handling the errors that occur in the application. It is configured to return a JSON response with the error message and the status code.  For more information check the error-express-handler package.  ","version":"Next","tagName":"h3"},{"title":"Container Config​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#container-config","content":" The container config file is responsible for configuring the dependency injection container. The container is used to manage the dependencies of the application and to inject them into the classes that need them. The container is configured using the tsyringe package. The package is used to create the container and to register the dependencies.  The boilerplate comes with a few default dependencies that are registered in the container. If the registered object is not a class, you can use the interface SERVICES under src/common/constants.ts to make it easier to find and share the registered object.  For more information check the tsyringe package documentation.  ","version":"Next","tagName":"h2"},{"title":"Config​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#config","content":" The boilerplate is configured to use the MapColonies configuration package. The package is used to manage the configuration of the application and to load it from a central server or environment variables.  The config is defined under src/common/config.ts file and uses the schema defined for the boilerplate in the MapColonies schemas package. As you implement your own service, you should create a new schema that matches your service configuration and extends the boilerplate's one.  Check the following resources for more information:  Config management docsConfig getting started guideMapColonies config package  ","version":"Next","tagName":"h2"},{"title":"Telemetry​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#telemetry","content":" The boilerplate comes with multiple options to monitor and observe your application. For best results, you should use all of them and tailor them to your needs.  ","version":"Next","tagName":"h2"},{"title":"Logger​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#logger","content":" The logger used by the boilerplate is MapColonies js-logger. The logger is available for usage by injecting it into your class using the @inject decorator.  The logger is also configured to log the requests and responses using the express-access-log-middleware package as explained here.  ","version":"Next","tagName":"h3"},{"title":"Metrics​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#metrics","content":" Metrics are handled by the prom-client package. The metrics are exposed at the /metrics endpoint and are collected by Prometheus. The metrics are configured to collect NodeJS, express and custom metrics.  Information about the metrics middleware is also available here.  ","version":"Next","tagName":"h3"},{"title":"Tracing​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#tracing","content":" The boilerplate is instrumented using OpenTelemetry. To ease with the implementation of tracing, the package uses the Telemetry package that handles the initialization and configuration of the OpenTelemetry SDK. In addition the package also exposes helpers which you can use to instrument your code. The tracing is defined in the src/common/tracing.ts file and loaded in the src/instrumentation.mts file.  warning The instrumentation.mts file must be loaded before the application loads. This can be done by using NodeJS --import flag. The NPM scripts and dockerfile are already configured to do so. If you are using a different way to load the application, make sure to load the instrumentation.mts file before the application loads.  ","version":"Next","tagName":"h3"},{"title":"openapi​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#openapi","content":" The boilerplate is a design first project. You should first design your API using the OpenAPI schema and then implement the code. The OpenAPI schema is located in the openapi directory. The OpenAPI schema is used to generate the types for the project.  For your convenience you can use the openapi-helpers package to type the request handlers in your controllers. For more information check the openapi-helpers package.  ","version":"Next","tagName":"h2"},{"title":"TypeScript paths​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#typescript-paths","content":" The boilerplate supports the use of TypeScript paths feature. You can add your own paths by adding a new one to the tsconfig.json file. The paths are defined under the compilerOptions.paths property.  The aliases are resolved to relative path after compilation using the tsc-alias package. For the tests, the aliases are resolved by mapping the paths using jest.  ","version":"Next","tagName":"h2"},{"title":"Common Folder​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#common-folder","content":" The src/common directory contains common code that is used by the application. It contains constants, interfaces, and types that are used by the application. You can extends the common code to add your own custom code.  ","version":"Next","tagName":"h2"},{"title":"Resource Structure​","type":1,"pageTitle":"Code","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/code#resource-structure","content":" Each resource in the project is a directory under the src/ directory. The resource directory is separated into the following directories:  Model - Contains your model, types and business logic. Controller - Contains the request handlers for the resource. Anything HTTP related should be in this directory. Routes - Contains the routes that map the request handlers to the endpoints. The routes are defined using the OpenAPI schema. The routes should be added to the router in the src/serverBuilder.ts file. ","version":"Next","tagName":"h2"},{"title":"Tests","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests","content":"","keywords":"","version":"Next"},{"title":"Running the tests​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#running-the-tests","content":" To run the tests, use the following command:  npm run test   It will run both the unit tests and the integration tests.  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#features","content":" ","version":"Next","tagName":"h2"},{"title":"Typescript and swc​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#typescript-and-swc","content":" The tests are written in TypeScript and compiled using swc. Before running the tests, we type check the code using the TypeScript compiler. By using swc, we can compile the TypeScript code to JavaScript faster than using the TypeScript compiler. For path alias support, we use the mapper provided by the ts-jest package.  note If you need to change swc settings, it can be done by editing the .swcrc file.  ","version":"Next","tagName":"h3"},{"title":"Configuration files​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#configuration-files","content":" The configuration files for Jest are located in the tests directory:  configuration/unit/jest.config.js: Configuration file for the unit tests.configuration/integration/jest.config.js: Configuration file for the integration tests.  Those files contain the configuration for Jest, including the setup files, the test environment, and the test matchers. For more information on Jest configuration, check the official Jest documentation.  ","version":"Next","tagName":"h3"},{"title":"jest-openapi​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#jest-openapi","content":" The boilerplate includes the jest-openapi package to test the API endpoints against an OpenAPI schema.  To run the tests, add the following matcher to your test  expect(response).toSatisfyApiSpec();   warning If you don't assert on the status code, the check might pass even if the response doesn't match the schema, as it compares to all possible responses.  ","version":"Next","tagName":"h3"},{"title":"openapi-helpers​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#openapi-helpers","content":" To ease the integration testings of your service, the boilerplate includes the openapi-helpers package. The package provides a set of functions and types based on your OpenAPI schema to help you write integration tests. When initialized, a &quot;request sender&quot; is created, which is a function that sends requests to your service based on the OpenAPI schema.  For complete documentation, check the package page.  ","version":"Next","tagName":"h3"},{"title":"ESLint​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#eslint","content":" Linting for the tests is done using ESLint, the MapColonies™ ESLint configuration, and the eslint-plugin-jest package. Check eslint-plugin-jest for all available rules, and MapColonies ESLint configuration for the rules that are enabled.  ","version":"Next","tagName":"h3"},{"title":"Coverage​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#coverage","content":" The tests are configured with coverage requirements to ensure that the code is well tested. The coverage threshold can be changed in the tests configuration files.  You can see the coverage report in the CLI after running the tests. The coverage report is also saved in the coverage directory.  ","version":"Next","tagName":"h3"},{"title":"Reporters​","type":1,"pageTitle":"Tests","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/tests#reporters","content":" The tests are configured to output an HTML report in addition to the default Jest output. The HTML report is saved in the reports directory. ","version":"Next","tagName":"h3"},{"title":"🎉 2025-Q1 Overview","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1","content":"","keywords":"","version":"Next"},{"title":"📊 Monitoring​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-monitoring","content":" ","version":"Next","tagName":"h2"},{"title":"🔑 Grafana SSO Authentication via GitHub​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-grafana-sso-authentication-via-github","content":" We’ve made logging into Grafana easier! Now, you can sign in using your GitHub account through Single Sign-On (SSO), so there's no need to manage another password. Simply click Sign in with GitHub on the Grafana login page, and you’re in!  Why this is great:  No more remembering passwordsSecure authentication via GitHub      ","version":"Next","tagName":"h3"},{"title":"🔧 Config Management​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-config-management","content":" ","version":"Next","tagName":"h2"},{"title":"📦 Deployed in All Sites and Ready for Production​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-deployed-in-all-sites-and-ready-for-production","content":" Our Config Management system has been successfully deployed across all environments and is now ready for production use!    ","version":"Next","tagName":"h3"},{"title":"🛠️ CI/CD Improvements​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#️-cicd-improvements","content":" ","version":"Next","tagName":"h2"},{"title":"📝 Helm Lint in the PR Workflow​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-helm-lint-in-the-pr-workflow","content":" To ensure higher quality and smoother deployments, we’ve added Helm linting as part of the pull request workflow. This will help us catch issues with Helm charts early on, preventing errors during deployment.    ","version":"Next","tagName":"h3"},{"title":"📦 Upgrading The Entire MC-Packages​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-upgrading-the-entire-mc-packages","content":" We took a major step forward by upgrading our entire MapColonies packages. It’s now fully compatible with the latest versions, ensuring improved performance and stability.  ","version":"Next","tagName":"h2"},{"title":"🚨 Upgrades with BREAKING CHANGES:​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-upgrades-with-breaking-changes","content":" ESLint Upgrade: v8 -&gt; v9​  Key changes in ESLint 9:  Flat Config as the default: Simplifies configuration with eslint.config.js as the single format. Better default settings: Supports newer JavaScript syntax by default, like ECMAScript latest version and ESM. Improved plugin and rule management: Makes it easier to set up and use ESLint with various plugins and rule sets. Performance improvements: Faster linting, especially in large projects.  These updates make ESLint 9 a more streamlined tool, improving both ease of setup and performance.  Open Telemetry Upgrades​  We’ve updated the telemetry package to the latest versions of all OpenTelemetry dependencies. This will help improve the observability and reliability of our services. You can see the PR here    ","version":"Next","tagName":"h3"},{"title":"🛡️ Authentication​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#️-authentication","content":" ","version":"Next","tagName":"h2"},{"title":"🔐 New Informative Properties in OPA Response​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-new-informative-properties-in-opa-response","content":" We’ve added to the response clients get from OPA some new properties. One important property is the &quot;sub&quot; field, which represents the client name. This can be very helpful when monitoring requests and analyzing usage by clients.  ","version":"Next","tagName":"h3"},{"title":"🔒 Masking Tokens for Security​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-masking-tokens-for-security","content":" We’ve masked the token information in OPA responses. This adds an additional layer of security and reduces the risk of exposing sensitive data.    ","version":"Next","tagName":"h3"},{"title":"📑 New Helm Library for Labels and Annotations​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-new-helm-library-for-labels-and-annotations","content":" We’ve created a new Helm library named labels and annotations. This library is responsible for adding common labels and annotations to any service that uses it as a dependency.  Why this is helpful:  Consistency: All services in the project will have the required labels and annotationsImprove Visualization: These labels will be used to help centralize services from all teams in one dashboard    ","version":"Next","tagName":"h2"},{"title":"🕍 Boilerplate​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-boilerplate","content":" We synced all the MC-Package upgrades to the boilerplate. Here are the important PRs made in this quarter:  ","version":"Next","tagName":"h2"},{"title":"🧾 Added Recommended VS Code Extensions (#337)​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-added-recommended-vs-code-extensions-337","content":" Added a recommended list of VS Code extensions to enhance the developer experience, including tools for YAML, OpenAPI, Helm, Docker, Kubernetes, and ESLint.  ","version":"Next","tagName":"h3"},{"title":"☸️ Added VS Code Settings (#338)​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#️-added-vs-code-settings-338","content":" Configured these additional VS Code settings:  Setting Prettier as the default formatterEnsuring a final newline is added to files  ","version":"Next","tagName":"h3"},{"title":"🗣️ Refactored Commitlint Configuration (#339)​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#️-refactored-commitlint-configuration-339","content":" This PR updates the commitlint configuration to extend @map-colonies/commitlint-config and removes custom scope rules that irrelevant now  ","version":"Next","tagName":"h3"},{"title":"🆕 Upgraded Redocly to a Non-Deprecated Package (#341)​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-upgraded-redocly-to-a-non-deprecated-package-341","content":" This PR replaces the deprecated Redocly dependency with the updated @redocly/cli package, including related configuration changes  ","version":"Next","tagName":"h3"},{"title":"📦 Common TSConfig Package (#342)​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#-common-tsconfig-package-342","content":" This PR updates the project to use the shared @map-colonies/tsconfig package, simplifying TypeScript configuration management and removing redundant files  ","version":"Next","tagName":"h3"},{"title":"⛏️📈 Upgraded ESLint to Newest Version (#344)​","type":1,"pageTitle":"🎉 2025-Q1 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q1#️-upgraded-eslint-to-newest-version-344","content":" Upgraded ESLint to the latest version, improving linting capabilities and ensuring compatibility with ESLint v9 ","version":"Next","tagName":"h3"},{"title":"Repo configuration and validation","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo","content":"","keywords":"","version":"Next"},{"title":"Dependabot​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#dependabot","content":" Dependabot is a GitHub app that checks for outdated dependencies in your repository and creates pull requests to update them. The configuration file for Dependabot is located in the .github directory. If you need to change the configuration, you can do so by editing the .github/dependabot.yml file. For reference on how to configure Dependabot, check the official documentation.  ","version":"Next","tagName":"h2"},{"title":"workflows​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#workflows","content":" The workflows for GitHub Actions are located in the .github/workflows directory. The boilerplate includes the following workflows:  build-and-push.yaml: This workflow is triggered when a new version is released. It builds the Docker image and pushes it to the Docker registry.pull_request.yaml: This workflow is triggered when a pull request is opened. It runs the tests and checks the code style.release-please.yaml This workflow manages the release of the package using release-please.  For more information check the Pipelines docs  ","version":"Next","tagName":"h2"},{"title":"Husky​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#husky","content":" Husky is a tool that allows you to run scripts before committing or pushing code to the repository by setting git hooks. The configuration file for Husky is located in the .husky directory.  The boilerplate includes the following hooks:  pre-commit: Runs pretty-quick to format the staged files.commit-msg: Runs the commitlint to check if the commit message follows the MapColonies commit specification.  ","version":"Next","tagName":"h2"},{"title":"VSCode settings​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#vscode-settings","content":" ","version":"Next","tagName":"h2"},{"title":"Settings​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#settings","content":" The .vscode/settings.json file contains workspace-specific settings that help maintain consistent code style across the team:  typescript.tsdk: Points to the local TypeScript installation to ensure consistent TypeScript version usagefiles.eol: Sets line endings to LF (\\n)editor.defaultFormatter: Uses Prettier as the default formatterfiles.insertFinalNewline: Ensures all files end with a newline  ","version":"Next","tagName":"h3"},{"title":"Launch options​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#launch-options","content":" The .vscode/launch.json file contains configurations for debugging the application in VSCode.  ","version":"Next","tagName":"h3"},{"title":"Extensions​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#extensions","content":" The .vscode/extensions.json file contains recommended extensions for this project:  redhat.vscode-yaml: YAML language supportRedocly.openapi-vs-code: OpenAPI (Swagger) editoresbenp.prettier-vscode: Code formattingTim-Koehler.helm-intellisense: Helm charts support42Crunch.vscode-openapi: OpenAPI design and validationdbaeumer.vscode-eslint: JavaScript/TypeScript lintingms-azuretools.vscode-docker: Docker supportms-kubernetes-tools.vscode-kubernetes-tools: Kubernetes supportms-azuretools.vscode-azureresourcegroups: Azure Resource Groups managementms-azuretools.vscode-azurevirtualmachines: Azure Virtual Machines management  ","version":"Next","tagName":"h3"},{"title":"EditorConfig​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#editorconfig","content":" EditorConfig is a tool that helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs. The configuration file for EditorConfig is located in the .editorconfig file.  The .editorconfig file contains settings that should be consistent across all of MapColonies™ projects, such as: end-of-line characters, indentation, and charset.  For more information on how to configure EditorConfig, check the official documentation.  ","version":"Next","tagName":"h2"},{"title":"gitignore and gitattributes​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#gitignore-and-gitattributes","content":" The .gitignore file contains a list of files and directories that should be ignored by Git.  The .gitattributes file contains attributes for paths in the repository. Using this file we make sure each file eol is LF.  For more information on how to configure .gitignore and .gitattributes, check the gitignore documentation and gitattributes documentation respectively.  ","version":"Next","tagName":"h2"},{"title":"npmrc​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#npmrc","content":" We use the npmrc file to make sure npm enforces the engine versions mandated by the dependencies in the package.json file. If needed, you can add more configurations to the .npmrc file.  For complete documentation, check the npmrc documentation.  ","version":"Next","tagName":"h2"},{"title":"nvmrc​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#nvmrc","content":" nvm, short for Node Version Manager, is a tool that allows you to install and manage multiple versions of Node.js on the same machine. The .nvmrc file contains the Node.js version that should be used for this project.  Run the following command in the repository root directory to use the Node.js version specified in the .nvmrc file:  nvm use   ","version":"Next","tagName":"h2"},{"title":"prettier​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#prettier","content":" Prettier is an opinionated code formatter that enforces a consistent code style across your codebase. The configuration file for Prettier is located in the .prettierrc file.  If you need to change the configuration, you can do so by editing the .prettierrc file. If you want to ignore some files or directories from being formatted by Prettier, you can add them to the .prettierignore file.  The configuration is taken from the MapColonies™ Prettier configuration package.  To check if the code is formatted correctly, run the following command:  npm run format   To format the code, run the following command:  npm run format:fix   ","version":"Next","tagName":"h2"},{"title":"ESLint​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#eslint","content":" ESLint is a tool that helps you find and fix problems in your TypeScript code. The configuration file for ESLint is located in the eslint.config.mjs file.  The configuration is taken from the MapColonies™ ESLint configuration package.  To check if the code is linted correctly, run the following command:  npm run lint   To fix the linting auto fixable issues, run the following command:  npm run lint:fix   ","version":"Next","tagName":"h2"},{"title":"redocly​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#redocly","content":" The .redocly.yaml files contains the configuration for the linting of the openapi specification file. The linting is done using the @redocly/cli package.  To check if the openapi specification file is linted correctly, run the following command:  npm run lint:openapi   ","version":"Next","tagName":"h2"},{"title":"commitlint​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#commitlint","content":" commitlint is a tool that checks if your commit messages meet the conventional commit format. The configuration file for commitlint is located in the commitlint.config.js file.  The configuration is taken from the MapColonies™ commitlint configuration package.  ","version":"Next","tagName":"h2"},{"title":"Release please​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#release-please","content":" Release please is a tool that helps you manage the release of your package. The configuration file for release please is located in the release-please-config.json and .release-please-manifest.json files.  ","version":"Next","tagName":"h2"},{"title":"package.json​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#packagejson","content":" The package.json file contains the metadata for the project, including the project name, version, and dependencies. It also contains the scripts that can be run using npm.  For more information on how to configure the package.json file, check the official npm documentation.  ","version":"Next","tagName":"h2"},{"title":"tsconfig​","type":1,"pageTitle":"Repo configuration and validation","url":"/infra-portal/pr-preview/pr-40/docs/knowledge-base/ts-server-boilerplate/repo#tsconfig","content":" The tsconfig.json file contains the configuration for the TypeScript compiler. The configuration is taken from the MapColonies™ TypeScript configuration package.  There are two main configurations:  tsconfig.json - The base configuration file, used for the IDE, testing and linting.tsconfig.build.json - The build configuration file, used for the build process. ","version":"Next","tagName":"h2"},{"title":"🎉 2025-Q3 Overview","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3","content":"","keywords":"","version":"Next"},{"title":"📊 Monitoring & Observability​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-monitoring--observability","content":" ","version":"Next","tagName":"h2"},{"title":"🪵 Welcome Loki: Our New Logging Solution​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-welcome-loki-our-new-logging-solution","content":" We're excited to complete our observability! Alongside Prometheus for metrics and Tempofor traces, we've now integrated Loki as our official logging solution.  Loki will aggregate logs from all our services, providing a centralized place to search, analyze, and debug. Logs will be processed in OpenTelemetry format via Alloy.  To get started, you can enable log scraping for your service by simply adding the following label to your pods: mapcolonies.io/alloy-api-logs. After that, you can see the logs immediately here  info In the future, we will release a dedicated NPM logger package, so in the meantime, DO NOT set this label on your NodeJS services.  ","version":"Next","tagName":"h3"},{"title":"💾 MinIO Gets a Significant Upgrade!​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-minio-gets-a-significant-upgrade","content":" We've rolled out a UI and monitoring upgrade for MinIO! We've often faced issues where MinIO would shut down because it ran out of disk space. To prevent this, we've integrated robust metrics and proactive alerts to warn us long before space becomes an issue. Additionally, we've added a new dashboard panel that shows the size of every bucket, making it incredibly easy to see where space is being used and how to free it up when needed.      ","version":"Next","tagName":"h3"},{"title":"🛡️ Authentication​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#️-authentication","content":" ","version":"Next","tagName":"h2"},{"title":"🔑 Token Kiosk for Temporary Access​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-token-kiosk-for-temporary-access","content":" We've launched the Token Kiosk, a new service for issuing temporary tokens to B2C clients. This is especially useful for applications like ArcGIS-Pro and ArcMap, where preventing token sharing across different machines is a security priority.  Key Features:  Secure Access: The service generates temporary tokens and can distinguish between different devices to ensure tokens aren't shared.SSO Integration: It uses an SSO to authenticate users securely.User-Friendly UI: A simple, Hebrew-language interface allows users to generate a token, view an expiration countdown, and copy the token with a single click.Token Lifecycle: Tokens are valid for one week by default, and all issuance is logged in a database for tracking.  Feel free to tell your friends and show them the kiosk here😉      ","version":"Next","tagName":"h3"},{"title":"💸 Infrastructure & Cost Optimization​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-infrastructure--cost-optimization","content":" ","version":"Next","tagName":"h2"},{"title":"📉 Weekend Auto-Scaler​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-weekend-auto-scaler","content":" To help reduce costs, we've implemented a new auto-scaling tool. This tool automatically downscales all non-prod deployments over the weekend (Azure only, not relevant to in-networks). Don't worry, the tool scales them back up to their original replica counts first thing on Sunday morning.  Whenever the tool starts working, it reports everything to our slack channel infra-notifications so if anything goes wrong, we'll be the first one to know and fix it.  This simple change allows us to optimize our resource usage and save money without impacting performance during the work week.    ","version":"Next","tagName":"h3"},{"title":"🚀 CI/CD Improvements​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-cicd-improvements","content":" ","version":"Next","tagName":"h2"},{"title":"🕵️ Jenkins Observability​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#️-jenkins-observability","content":" Ever had a pipeline fail without a clear reason? We've enhanced our Jenkins setup with improved observability. This will make it significantly easier to debug pipeline issues, detect errors proactively, and understand performance bottlenecks, leading to a more stable and reliable CI/CD environment.    ","version":"Next","tagName":"h3"},{"title":"🗃️ Databases​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#️-databases","content":" ","version":"Next","tagName":"h2"},{"title":"🔒 Postgres with SSL for Local Development​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-postgres-with-ssl-for-local-development","content":" We've published a new repository containing instructions on how to easily deploy Postgres with SSL. The repo contains also a walkthrough and friendly guide for all the complex steps, from generating all the certs files to import and use them. This allows developers to test their services in an environment that more closely mirrors production, ensuring that database connections are secure and properly configured before deployment.  What are you waiting for?😱 Go deploy your secured postgres!!    ","version":"Next","tagName":"h3"},{"title":"🚦 Service Health & Status​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-service-health--status","content":" ","version":"Next","tagName":"h2"},{"title":"♟️ Checkmate - The CLI, Now as a Service​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#️-checkmate---the-cli-now-as-a-service","content":" Building on our infra-CLI, we're excited to introduce Checkmate! Checkmate is a new API service that exposes the same powerful checks and tools found in our CLI.    ","version":"Next","tagName":"h3"},{"title":"✨ New Status Page Initiative​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-new-status-page-initiative","content":" We've begun work on a centralized Status Page for the entire MapColonies project. This page will be the single source of truth for questions like:  What's the operational status of each team's services?What alerts are currently active?What is the uptime for key applications?  The status will be presented as a Grafana dashboard, built on metrics enriched with MapColonies labels and annotations according to project requirements.  This is a collaborative effort, and soon we will be working closely with all teams to build out their respective sections on the page.    ","version":"Next","tagName":"h3"},{"title":"📦 MC packages​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-mc-packages","content":" ","version":"Next","tagName":"h2"},{"title":"✨ Unified CLI utilities for openapi-helpers package v4.0.0​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-unified-cli-utilities-for-openapi-helpers-package-v400","content":" Before: The package provided a CLI that generates types from OpenAPI specifications.  Now: The package has been significantly enhanced with new capabilities:  Generates error mappings and code classes from the OpenAPI specificationUnified CLI to generate both types and errors, providing a single source of truthProgrammatic support is now available - you can import and use the generators directly in your code  You can find the full documentation here: MapColonies openapi-helpers package.    ","version":"Next","tagName":"h3"},{"title":"🕍 Boilerplate​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-boilerplate","content":" ","version":"Next","tagName":"h2"},{"title":"🔧 ts-server-boilerplate: PR and Build & Push workflows refactor​","type":1,"pageTitle":"🎉 2025-Q3 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q3#-ts-server-boilerplate-pr-and-build--push-workflows-refactor","content":" Refactored the ts-server-boilerplate CI to maximize reuse and make changes easier for developers:  Before: ts-server-boilerplate workflows called reusable workflows in the shared-workflow repo.Now: workflows call multiple reusable actions directly from the shared-workflow repo, keeping steps visible and easy to tweak in-repo.  Now developers can more easily adjust steps per service while still using our standardized actions. ","version":"Next","tagName":"h3"},{"title":"🎉 2024-Q4 Overview","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4","content":"","keywords":"","version":"Next"},{"title":"🔧 Config Management​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-config-management","content":" We are excited to introduce Config Management, your go-to solution for handling all configurations within MapColonies. This new system ensures a smoother, more centralized way to manage configurations, reducing manual efforts and increasing consistency across your services.  👉 For more information, see this page    ","version":"Next","tagName":"h2"},{"title":"📊 Monitoring​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-monitoring","content":" ","version":"Next","tagName":"h2"},{"title":"📈 Upgrading The Entire Monitoring Stack 🚀​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-upgrading-the-entire-monitoring-stack-","content":" We’ve given our entire monitoring stack a big refresh! With the latest versions now in place, you’ll notice better performance, cleaner interfaces, and a few awesome new features to make your life easier.  Tool\tPrevious Version\tNew VersionGrafana\t9.4.7\t11.4.0 Prometheus\t2.46.0\t3.0.1 Alertmanager\t0.25.0\t0.27.0 OTEL-Collector\t0.77.0\t0.115.1 Tempo\t2.3.0\t2.6.0  Interesting Adds: 🧭 Tempo:  Performance enhancementsYou can now filter traces by properties (like span ID) for faster debugging and navigation  🔍 Prometheus:  Brand UI — cleaner, simpler, and built from scratchMassive Performance enhancements for faster queries and better responsiveness  📊 Grafana:  Subfolders support to better organize your dashboardsEasier data source selectionExplore mode now supports querying multiple data sources at onceSpan filtering in traces for a better tracing experienceFormat Time transformation can make you set a cleaner and more readable format  ","version":"Next","tagName":"h3"},{"title":"Kube State Metrics​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#kube-state-metrics","content":" Kube State Metrics (KSM) is a tool that collects metrics about the state of Kubernetes objects like Pods, Nodes, and Deployments. It provides valuable insights into our cluster's health, helping us monitor and troubleshoot more effectively. KSM integrates seamlessly with Prometheus, making it easy to use with our existing monitoring setup.  tip With KSM, you can monitor the state of Pods and receive alerts if any are in a crash loop. You can also track resource usage (memory and CPU) in Pods to determine if they justify the allocated resources.  ","version":"Next","tagName":"h3"},{"title":"Say Goodbye To Trash Traces​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#say-goodbye-to-trash-traces","content":" No more irrelevant data clogging up your monitoring systems! We've filtered out traces from unimportant paths, so Tempo is now free of unnecessary clutter, leaving you with clean, actionable traces that tell the real story.  info The filtered paths are: livenesshealthmetrics If there are more paths that you want to filter out, feel free to tell us!    ","version":"Next","tagName":"h3"},{"title":"🚀 CI/CD Improvements​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-cicd-improvements","content":" ","version":"Next","tagName":"h2"},{"title":"📥 Automatic Deployments for integration Branch​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-automatic-deployments-for-integration-branch","content":" We've added auto-deployment support for the integration branch in the helm-charts repository. Now, you can deploy changes effortlessly just like you do for master. Add a deployment.json file, and our Jenkins pipeline will handle the rest.  ","version":"Next","tagName":"h3"},{"title":"🛡️ Helm Diff for Safer Deployments​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#️-helm-diff-for-safer-deployments","content":" Have you ever deployed without knowing exactly what will be changed? Remember those nerve-wracking moments when deploying to the Prod environment, with shaky hands? Well... No More! Say goodbye to deployment anxiety with Helm Diff! Now, you can preview all changes before they go live, so you know exactly what's being updated. It’s like having a safety net for your deployments. 💂🥅  For more information, see this page.  ","version":"Next","tagName":"h3"},{"title":"👥 Who Deployed?​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-who-deployed","content":" Sometimes you want to know who made a change in helm-charts repo that triggered a deployment (with the auto-deploy pipeline)? Well, now you can! No more mysteries! After the pipeline is triggered and deployed the changed chart, in the slack message, in addition to the status of the deployment, you will get also the developer name that made the change that triggered the deployment. Be nice when you blame him 😨    ","version":"Next","tagName":"h3"},{"title":"📦 MC-Packages​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-mc-packages","content":" ","version":"Next","tagName":"h2"},{"title":"Openapi Helpers​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#openapi-helpers","content":" Working with OpenAPI has never been easier! We are happy to introduce the OpenAPI Helpers package, which automatically generates types and interfaces directly from the OpenAPI specification. No more manual coding — just faster development with fewer errors!  For example, instead of creating an interface that fits the openapi, like this:  Before interface IAnotherResourceModel { kind: string; isAlive: boolean; } type GetResourceHandler = RequestHandler&lt;undefined, IAnotherResourceModel&gt;; public getResource: GetResourceHandler = (req, res) =&gt; { }   You can just use the generated types and objects directly from openapi:  Using The Package import { components } from '@openapi'; import type { TypedRequestHandlers } from '@openapi'; type IAnotherResourceModel = components['schemas']['anotherResource']; public getResource: TypedRequestHandlers['getAnotherResource'] = (req, res) =&gt; { }     ","version":"Next","tagName":"h3"},{"title":"Boilerplate​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#boilerplate","content":" We’ve made some important boilerplate improvements to streamline your development experience. ⚡  ","version":"Next","tagName":"h2"},{"title":"📂 TypeScript Path Aliases​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-typescript-path-aliases","content":" Now, you can use TypeScript path aliases to simplify your imports: For example:  Relative Paths import { SERVICES } from '../../common/constants';   Using tsc-alias NPM Package import { SERVICES } from '@common/constants';   You can see this PR for more info.  ","version":"Next","tagName":"h3"},{"title":"📦 OpenAPI Helpers Integration​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-openapi-helpers-integration","content":" OpenAPI Helpers package is now part of our boilerplate, making it even easier to work with OpenAPI specifications. The integration can be found in this PR.  ","version":"Next","tagName":"h3"},{"title":"Upgrade husky for commitlint​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#upgrade-husky-for-commitlint","content":" We’ve upgraded husky to fix commitlint verification, which wasn’t working properly in the boilerplate. we resolved this issue, ensuring higher code quality with commit linting now in place.  The relevant PRs are: #320 and#321  ","version":"Next","tagName":"h3"},{"title":"📦 Release Automation with Release-Please​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#-release-automation-with-release-please","content":" We’ve integrated Release-Please to automate our release process, ensuring compliance with semantic versioning. This will streamline your workflow and improve release consistency.  The release-please integration can be found in this PR  ","version":"Next","tagName":"h3"},{"title":"Added Prometheus metrics integration (using prom-client)​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#added-prometheus-metrics-integration-using-prom-client","content":" We’ve added Prometheus metrics integration using prom-client for easier monitoring and observability.  You can find it here.  ","version":"Next","tagName":"h3"},{"title":"Integrate to Config Management​","type":1,"pageTitle":"🎉 2024-Q4 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q4#integrate-to-config-management","content":" Config Management is now part of our boilerplate. You can see the integration here.  This quarter has been packed with exciting updates and improvements! If you have any questions, feel free to reach out, and happy coding! 💻🚀 ","version":"Next","tagName":"h3"},{"title":"🎉 2025-Q2 Overview","type":0,"sectionRef":"#","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2","content":"","keywords":"","version":"Next"},{"title":"🔧 Config Management​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-config-management","content":" ","version":"Next","tagName":"h2"},{"title":"✨ MAJOR Version Upgrade and Key Fixes​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-major-version-upgrade-and-key-fixes","content":" We've rolled out a new MAJOR version of our Config Management system, packed with important fixes and a game-changing new feature!  Support for Versioned Configs: You can now create multiple versions of a configuration schema with the same name. Previously, if you had a schema named bla and wanted to create an updated version, you couldn't use the name bla again. Now you can! This makes managing configuration evolution much more intuitive.Bug Fixes 🐛: We've resolved some tricky issues: A problem with schemas using oneOf and a default value has been fixed by enabling AJV's discriminator option.The &quot;unevaluated properties&quot; error is now enriched with more context, making it much easier to debug your schemas.    ","version":"Next","tagName":"h3"},{"title":"🚀 CI/CD Improvements​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-cicd-improvements","content":" ","version":"Next","tagName":"h2"},{"title":"🎵 From Playlists to Songs: Shared Workflows Refactor​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-from-playlists-to-songs-shared-workflows-refactor","content":" Our shared-workflows repository has been completely redesigned for flexibility!  Previously, we offered complete workflows (&quot;playlists&quot;), but we found that everyone needed slight variations. To solve this, we've broken them down into modular actions (&quot;songs&quot;). Now, you can build your own custom workflow (&quot;playlist&quot;) perfectly tailored to your service's needs by picking and choosing the actions you want.    ","version":"Next","tagName":"h3"},{"title":"🛡️ Authentication (OPAla)​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#️-authentication-opala","content":" ","version":"Next","tagName":"h2"},{"title":"🎨 Welcome, OPAla UI!​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-welcome-opala-ui","content":" Say goodbye to creating OPAla clients and connections through the Swagger API! We're thrilled to introduce the OPAla UI, a user-friendly interface for managing all your authentication needs. This new UI makes the entire process faster, more intuitive, and less error-prone.    ","version":"Next","tagName":"h3"},{"title":"🔄 Automatic Fetching of Latest Versions​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-automatic-fetching-of-latest-versions","content":" OPAla just got smarter! It now supports automatically fetching the latest version of connections and assets.    ","version":"Next","tagName":"h3"},{"title":"🛠️ New Developer Tools​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#️-new-developer-tools","content":" ","version":"Next","tagName":"h2"},{"title":"🤖 Infra CLI Tools​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-infra-cli-tools","content":" We've launched a new Infra CLI, a command-line tool built with TypeScript to help you with common infrastructure tasks.  So far, it includes two handy tools:  Routes: validate-certs - Checks OpenShift routes and validates their TLS certificates to prevent certificate-related issues.    Monitoring: metrics-annotations - Scans your Kubernetes deployments and stateful sets to ensure they have the proper Prometheus metrics annotations.    ","version":"Next","tagName":"h3"},{"title":"🐙 Javascript-Github-Actions​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-javascript-github-actions","content":" We've created a new home for our reusable, JavaScript-based GitHub Actions. This repository will contain a collection of actions to simplify and standardize your CI/CD pipelines.  The first available action is:  jira-integration: Helps you connect pull requests to Jira tickets, automatically adds comments with relevant info, and validates that the PR title contains a Jira ticket ID.      ","version":"Next","tagName":"h3"},{"title":"🕍 Boilerplate​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-boilerplate","content":" ","version":"Next","tagName":"h2"},{"title":"📚 Documentation Now on Infra-Portal​","type":1,"pageTitle":"🎉 2025-Q2 Overview","url":"/infra-portal/pr-preview/pr-40/docs/what-we-did/Q2#-documentation-now-on-infra-portal","content":" To make onboarding and development smoother, we've added the complete documentation for our TypeScript boilerplate directly to the infra-portal. Now you can find all the information you need in one centralized place! Right here! ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}