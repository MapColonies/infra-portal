"use strict";(self.webpackChunkinfra_portal=self.webpackChunkinfra_portal||[]).push([[8475],{1756:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>d,default:()=>c,frontMatter:()=>p,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"knowledge-base/packages/openapi-helpers/typedoc/typedRequestHandler/type-aliases/TypedRequestHandlers","title":"TypedRequestHandlers","description":"@map-colonies/openapi-helpers v2.0.0","source":"@site/docs/knowledge-base/packages/openapi-helpers/typedoc/typedRequestHandler/type-aliases/TypedRequestHandlers.md","sourceDirName":"knowledge-base/packages/openapi-helpers/typedoc/typedRequestHandler/type-aliases","slug":"/knowledge-base/packages/openapi-helpers/typedoc/typedRequestHandler/type-aliases/TypedRequestHandlers","permalink":"/infra-portal/docs/knowledge-base/packages/openapi-helpers/typedoc/typedRequestHandler/type-aliases/TypedRequestHandlers","draft":false,"unlisted":false,"editUrl":"https://github.com/MapColonies/infra-portal/tree/master/docs/knowledge-base/packages/openapi-helpers/typedoc/typedRequestHandler/type-aliases/TypedRequestHandlers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"knowledgeBaseSidebar","previous":{"title":"index","permalink":"/infra-portal/docs/knowledge-base/packages/openapi-helpers/typedoc/typedRequestHandler/"},"next":{"title":"Prettier config","permalink":"/infra-portal/docs/knowledge-base/packages/prettier-config/"}}');var a=n(4848),r=n(8453);const p={},d=void 0,o={},l=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"Example",id:"example",level:2}];function i(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:(0,a.jsx)(s.a,{href:"/infra-portal/docs/knowledge-base/packages/openapi-helpers/typedoc/",children:(0,a.jsx)(s.strong,{children:"@map-colonies/openapi-helpers v2.0.0"})})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h1,{id:"type-alias-typedrequesthandlerspaths-operations",children:"Type Alias: TypedRequestHandlers<Paths, Operations>"}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"TypedRequestHandlers"}),"<",(0,a.jsx)(s.code,{children:"Paths"}),", ",(0,a.jsx)(s.code,{children:"Operations"}),">: ",(0,a.jsx)(s.code,{children:"OperationHandlers"}),"<",(0,a.jsx)(s.code,{children:"Operations"}),"> & ",(0,a.jsx)(s.code,{children:"PathHandlers"}),"<",(0,a.jsx)(s.code,{children:"Paths"}),">"]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Defined in: ",(0,a.jsx)(s.a,{href:"https://github.com/MapColonies/openapi-helpers/blob/147b542e6ac7e25ec0ab9e67adfd6305da29906e/src/typedRequestHandler/typedRequestHandler.ts#L69",children:"typedRequestHandler/typedRequestHandler.ts:69"})]}),"\n",(0,a.jsxs)(s.p,{children:["Represents a collection of request handlers that are typed based on the provided\n",(0,a.jsx)(s.code,{children:"Paths"})," and ",(0,a.jsx)(s.code,{children:"Operations"})," templates generated from the openapi. This type combines both operation-specific\nhandlers and path-specific handlers."]}),"\n",(0,a.jsx)(s.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,a.jsxs)(s.p,{children:["\u2022 ",(0,a.jsx)(s.strong,{children:"Paths"})," ",(0,a.jsx)(s.em,{children:"extends"})," ",(0,a.jsx)(s.code,{children:"PathsTemplate"})]}),"\n",(0,a.jsx)(s.p,{children:"A template that defines the structure of the paths."}),"\n",(0,a.jsxs)(s.p,{children:["\u2022 ",(0,a.jsx)(s.strong,{children:"Operations"})," ",(0,a.jsx)(s.em,{children:"extends"})," ",(0,a.jsx)(s.code,{children:"OperationsTemplate"})]}),"\n",(0,a.jsx)(s.p,{children:"A template that defines the structure of the operations."}),"\n",(0,a.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:"import type { TypedRequestHandlers } from './typedRequestHandler';\nimport type { Paths, Operations } from './types';\nimport express from 'express';\n\nconst handlers: TypedRequestHandlers<Paths, Operations> = {\n  'GET /example': (req, res) => {\n    res.send({ message: 'Example GET handler' });\n  },\n  exampleOperation: (req, res) => {\n    res.send({ message: 'Example operation handler' });\n  },\n};\n\nconst app = express();\napp.get('/example', handlers['GET /example']);\napp.post('/exampleOperation', handlers.exampleOperation);\n"})})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>p,x:()=>d});var t=n(6540);const a={},r=t.createContext(a);function p(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:p(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);