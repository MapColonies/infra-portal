"use strict";(self.webpackChunkinfra_portal=self.webpackChunkinfra_portal||[]).push([[6493],{3255:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"knowledge-base/packages/js-logger/README","title":"js logger","description":"JavaScript and TypeScript logger for MapColonies based on pino.","source":"@site/docs/knowledge-base/packages/js-logger/README.md","sourceDirName":"knowledge-base/packages/js-logger","slug":"/knowledge-base/packages/js-logger/","permalink":"/infra-portal/docs/knowledge-base/packages/js-logger/","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"custom_edit_url":null},"sidebar":"knowledgeBaseSidebar","previous":{"title":"default","permalink":"/infra-portal/docs/knowledge-base/packages/express-access-log-middleware/typedoc/functions/default"},"next":{"title":"index","permalink":"/infra-portal/docs/knowledge-base/packages/js-logger/typedoc/"}}');var o=r(4848),s=r(8453);const i={custom_edit_url:null},d="js logger",l={},c=[{value:"API documentation",id:"api-documentation",level:2},{value:"Usage",id:"usage",level:2},{value:"Logging errors",id:"logging-errors",level:3},{value:"Configuration",id:"configuration",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"js-logger",children:"js logger"})}),"\n",(0,o.jsx)(n.p,{children:"JavaScript and TypeScript logger for MapColonies based on pino."}),"\n",(0,o.jsx)(n.h2,{id:"api-documentation",children:"API documentation"}),"\n",(0,o.jsxs)(n.p,{children:["Check the autogenerated documentation ",(0,o.jsx)(n.a,{href:"https://mapcolonies.github.io/js-logger/",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import jsLogger from '@map-colonies/js-logger';\n\nconst logger = jsLogger();\n\nlogger.info('hello world');\n\nlogger.error({hello: 'world'});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"logging-errors",children:"Logging errors"}),"\n",(0,o.jsxs)(n.p,{children:["One of the features of the logger is the ability to parse error objects and format them accordingly.\nTo allow the logger to identify the error, add it to the log object under the ",(0,o.jsx)(n.code,{children:"err"})," key."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'try {\n  // complex code\n} catch (error) {\n  logger.error({msg: "oh noes", err: error});\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For more detailed usage check the ",(0,o.jsx)(n.a,{href:"https://github.com/pinojs/pino",children:"pino documentation"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"name"}),(0,o.jsx)(n.th,{children:"type"}),(0,o.jsx)(n.th,{children:"default value"}),(0,o.jsx)(n.th,{children:"description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"enabled"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:"true"}),(0,o.jsx)(n.td,{children:"determines if logging is enabled"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"level"}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:"'info'"}),(0,o.jsx)(n.td,{children:"specifies the logging level"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"redact"}),(0,o.jsx)(n.td,{children:"array"}),(0,o.jsx)(n.td,{children:"undefined"}),(0,o.jsx)(n.td,{children:"defines paths to redact from log output"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"hooks"}),(0,o.jsx)(n.td,{children:"object"}),(0,o.jsx)(n.td,{children:"undefined"}),(0,o.jsx)(n.td,{children:"hooks for customizing log behavior"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"base"}),(0,o.jsx)(n.td,{children:"object"}),(0,o.jsx)(n.td,{children:"{pid: process.pid, hostname: os.hostname}"}),(0,o.jsx)(n.td,{children:"base properties to include in log output"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"mixin"}),(0,o.jsx)(n.td,{children:"function"}),(0,o.jsx)(n.td,{children:"undefined"}),(0,o.jsx)(n.td,{children:"function to add custom properties to log output"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"prettyPrint"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:"false"}),(0,o.jsx)(n.td,{children:"enables pretty-printing of log output"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"pinoCaller"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:"false"}),(0,o.jsx)(n.td,{children:"includes the caller's file and line number in log output"})]})]})]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["This page was generated from a remote source. you can find it on ",(0,o.jsx)(n.a,{href:"https://github.com/MapColonies/js-logger/blob/master/README.md",children:"https://github.com/MapColonies/js-logger/blob/master/README.md"})]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>d});var t=r(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);